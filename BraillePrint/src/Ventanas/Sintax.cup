package Ventanas;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal
    Entero, VarCar, Flotante, Texto,
    Si, Alter, CicloMientras, CicloFor, Declarar, Campotrabajo,
    Adicion, Sustraccion, Producto, Cociente, 
    Parentesis_a, Parentesis_c, Llave_a, Llave_c, Corchete_a, Corchete_c, Punto_Coma, Coma, Comillas,
    Op_Logico, Op_Relacional, Op_Booleano, Op_Atribucion, Asignacion, 
    Num_Entero, Identificador,
    func_Ver, func_ContCarac, func_ValCad, func_Imprimir, ERROR, ERR_ID, ERR_NUM
;
non terminal 
    INICIO, DECLARACION, DECLARACION_FOR, SI, FUNCION, TDATO,VALOR, ALTER,
    CICLOMIENTRAS, CICLOFOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR, SENTENCIAS, CUERPO
;
start with INICIO
;
INICIO ::= 
    Campotrabajo CUERPO
;
CUERPO ::=
    Llave_a Llave_c |
    Llave_a SENTENCIAS Llave_c
;
VALOR::= 
 Num_Entero | Texto | Op_Booleano | Identificador
;
SENTENCIAS::= 
SENTENCIAS DECLARACION |
DECLARACION |  
SENTENCIAS SI |
SI |
SENTENCIAS ALTER |
ALTER |
SENTENCIAS FUNCION |
FUNCION |
SENTENCIAS CICLOMIENTRAS |
CICLOMIENTRAS |
SENTENCIAS CICLOFOR |
CICLOFOR
;
DECLARACION ::=  
    Declarar Corchete_a TDATO Corchete_c Identificador Asignacion VALOR Punto_Coma |
    Declarar Corchete_a TDATO Corchete_c Identificador Coma Identificador Asignacion VALOR Punto_Coma
;
TDATO::= 
    Entero|Flotante|VarCar|Num_Entero
;
FUNCION::=
    func_ValCad Llave_a Texto Llave_c Punto_Coma |
    func_Ver Parentesis_a Identificador Parentesis_c Punto_Coma|
    func_ContCarac Parentesis_a Identificador Parentesis_c Punto_Coma|
    func_Imprimir Parentesis_a Identificador Parentesis_c Punto_Coma
;
SI ::= 
    Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c |
    Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c 
;
SENTENCIA_BOOLEANA ::= 
    Op_Booleano | 
    VALOR Op_Relacional VALOR
;
ALTER ::= 
    Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c Alter Llave_a Llave_c |
    Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c Alter Llave_a Llave_c |
    Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c Alter Llave_a SENTENCIAS Llave_c
;
CICLOMIENTRAS ::= 
    CicloMientras Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a  Llave_c |
    CicloMientras Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c
;
CICLOFOR ::= 
    CicloFor Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a Llave_c |
    CicloFor Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIAS Llave_c
;
SENTENCIA_FOR ::=
    Entero Identificador Asignacion Num_Entero Punto_Coma SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR |
    Identificador Asignacion Num_Entero Punto_Coma SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR
;
DECLARACION_FOR ::= 
    Identificador Op_Atribucion Num_Entero |
    Identificador Adicion Adicion | 
    Adicion Adicion Identificador |
    Identificador Sustraccion Sustraccion | 
    Sustraccion Sustraccion Identificador 
;
