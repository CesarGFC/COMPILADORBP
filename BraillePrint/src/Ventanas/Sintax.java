
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package Ventanas;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\234\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\017\004\000\002\017\003" +
    "\000\002\017\003\000\002\017\005\000\002\017\004\000" +
    "\002\017\004\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\016\004\000\002\016" +
    "\003\000\002\016\004\000\002\016\003\000\002\016\004" +
    "\000\002\016\003\000\002\016\004\000\002\016\003\000" +
    "\002\016\004\000\002\016\003\000\002\016\004\000\002" +
    "\016\003\000\002\016\003\000\002\003\010\000\002\003" +
    "\007\000\002\003\007\000\002\003\007\000\002\003\007" +
    "\000\002\003\007\000\002\003\007\000\002\003\012\000" +
    "\002\003\011\000\002\003\011\000\002\003\011\000\002" +
    "\003\011\000\002\003\011\000\002\003\011\000\002\003" +
    "\011\000\002\003\011\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\006\007\000" +
    "\002\006\006\000\002\006\006\000\002\006\006\000\002" +
    "\006\006\000\002\006\006\000\002\006\006\000\002\006" +
    "\007\000\002\006\006\000\002\006\006\000\002\006\006" +
    "\000\002\006\006\000\002\006\007\000\002\006\006\000" +
    "\002\006\006\000\002\006\006\000\002\006\006\000\002" +
    "\006\007\000\002\006\006\000\002\006\006\000\002\006" +
    "\006\000\002\006\006\000\002\005\010\000\002\005\007" +
    "\000\002\005\007\000\002\005\007\000\002\005\007\000" +
    "\002\005\011\000\002\005\010\000\002\005\010\000\002" +
    "\005\010\000\002\005\010\000\002\014\003\000\002\014" +
    "\005\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\011\013\000\002\011\012\000\002\011\012\000" +
    "\002\011\012\000\002\011\012\000\002\011\012\000\002" +
    "\011\012\000\002\011\013\000\002\011\013\000\002\011" +
    "\013\000\002\011\013\000\002\011\013\000\002\011\013" +
    "\000\002\011\015\000\002\011\014\000\002\011\014\000" +
    "\002\011\014\000\002\011\014\000\002\011\014\000\002" +
    "\011\014\000\002\011\014\000\002\011\014\000\002\012" +
    "\010\000\002\012\007\000\002\012\007\000\002\012\007" +
    "\000\002\012\007\000\002\012\011\000\002\012\010\000" +
    "\002\012\010\000\002\012\010\000\002\012\010\000\002" +
    "\013\007\000\002\013\007\000\002\013\007\000\002\013" +
    "\007\000\002\013\007\000\002\013\011\000\002\013\010" +
    "\000\002\013\010\000\002\013\010\000\002\013\010\000" +
    "\002\013\010\000\002\013\010\000\002\015\012\000\002" +
    "\015\011\000\002\015\011\000\002\015\011\000\002\015" +
    "\011\000\002\015\011\000\002\015\011\000\002\015\011" +
    "\000\002\015\010\000\002\015\010\000\002\015\010\000" +
    "\002\015\010\000\002\015\010\000\002\015\010\000\002" +
    "\004\005\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\005\000\002\004\004\000\002\004\004" +
    "\000\002\004\005\000\002\004\004\000\002\004\005\000" +
    "\002\004\004\000\002\004\004\000\002\004\005\000\002" +
    "\004\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0157\000\036\003\024\004\006\006\017\007\016\010" +
    "\012\015\007\016\015\017\005\020\025\031\004\033\030" +
    "\034\020\035\026\036\021\001\002\000\016\004\u010d\025" +
    "\034\026\041\046\042\047\037\050\043\001\002\000\006" +
    "\004\u0103\046\u0104\001\002\000\012\030\170\043\172\046" +
    "\370\050\371\001\002\000\006\004\355\050\356\001\002" +
    "\000\004\002\ufffe\001\002\000\032\002\ufff2\004\ufff2\007" +
    "\ufff2\010\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\031\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\001\002\000\012\043\113\044" +
    "\107\045\106\047\110\001\002\000\032\002\uffea\004\uffea" +
    "\007\uffea\010\uffea\015\uffea\016\uffea\017\uffea\020\uffea\031" +
    "\uffea\033\uffea\034\uffea\035\uffea\001\002\000\030\004\006" +
    "\007\345\010\012\015\007\016\015\017\005\020\025\031" +
    "\004\033\030\034\020\035\026\001\002\000\006\004\333" +
    "\050\334\001\002\000\004\002\ufffb\001\002\000\034\002" +
    "\ufffc\003\024\004\006\007\331\010\012\015\007\016\015" +
    "\017\005\020\025\031\004\033\030\034\020\035\026\001" +
    "\002\000\012\004\167\030\170\043\172\050\171\001\002" +
    "\000\036\002\uffff\003\024\004\006\006\017\007\016\010" +
    "\012\015\007\016\015\017\005\020\025\031\004\033\030" +
    "\034\020\035\026\001\002\000\032\002\uffee\004\uffee\007" +
    "\uffee\010\uffee\015\uffee\016\uffee\017\uffee\020\uffee\031\uffee" +
    "\033\uffee\034\uffee\035\uffee\001\002\000\032\002\ufff0\004" +
    "\ufff0\007\ufff0\010\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\031\ufff0\033\ufff0\034\ufff0\035\ufff0\001\002\000\032\002" +
    "\uffe7\004\uffe7\007\uffe7\010\uffe7\015\uffe7\016\uffe7\017\uffe7" +
    "\020\uffe7\031\uffe7\033\uffe7\034\uffe7\035\uffe7\001\002\000" +
    "\006\004\153\050\154\001\002\000\014\010\111\043\113" +
    "\044\107\045\106\047\110\001\002\000\032\002\uffe8\004" +
    "\uffe8\007\uffe8\010\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\031\uffe8\033\uffe8\034\uffe8\035\uffe8\001\002\000\016\004" +
    "\035\025\034\026\041\046\042\047\037\050\043\001\002" +
    "\000\004\002\033\001\002\000\032\002\uffec\004\uffec\007" +
    "\uffec\010\uffec\015\uffec\016\uffec\017\uffec\020\uffec\031\uffec" +
    "\033\uffec\034\uffec\035\uffec\001\002\000\004\002\001\001" +
    "\002\000\012\026\046\046\042\047\037\050\043\001\002" +
    "\000\016\005\064\025\034\026\041\046\042\047\037\050" +
    "\043\001\002\000\004\005\050\001\002\000\052\002\ufff7" +
    "\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\012\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\025\ufff7\026\ufff7\031\ufff7" +
    "\033\ufff7\034\ufff7\035\ufff7\046\ufff7\047\ufff7\050\ufff7\001" +
    "\002\000\014\025\044\026\046\046\042\047\037\050\043" +
    "\001\002\000\022\005\uffb2\006\uffb2\012\uffb2\025\ufff5\026" +
    "\ufff5\046\ufff5\047\ufff5\050\ufff5\001\002\000\052\002\ufff6" +
    "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\012\ufff6\015" +
    "\ufff6\016\ufff6\017\ufff6\020\ufff6\025\ufff6\026\ufff6\031\ufff6" +
    "\033\ufff6\034\ufff6\035\ufff6\046\ufff6\047\ufff6\050\ufff6\001" +
    "\002\000\052\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4" +
    "\010\ufff4\012\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\025" +
    "\ufff4\026\ufff4\031\ufff4\033\ufff4\034\ufff4\035\ufff4\046\ufff4" +
    "\047\ufff4\050\ufff4\001\002\000\020\005\uffb0\006\uffb0\012" +
    "\uffb0\026\046\046\042\047\037\050\043\001\002\000\010" +
    "\005\uffaf\006\uffaf\012\uffaf\001\002\000\040\002\ufff5\004" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\012\ufff5\015\ufff5" +
    "\016\ufff5\017\ufff5\020\ufff5\031\ufff5\033\ufff5\034\ufff5\035" +
    "\ufff5\001\002\000\010\005\uffb1\006\uffb1\012\uffb1\001\002" +
    "\000\004\006\051\001\002\000\032\003\024\004\006\007" +
    "\053\010\012\015\007\016\015\017\005\020\025\031\004" +
    "\033\030\034\020\035\026\001\002\000\030\004\006\007" +
    "\057\010\012\015\007\016\015\017\005\020\025\031\004" +
    "\033\030\034\020\035\026\001\002\000\032\002\uff93\004" +
    "\uff93\007\uff93\010\uff93\015\uff93\016\uff93\017\uff93\020\uff93" +
    "\031\uff93\033\uff93\034\uff93\035\uff93\001\002\000\032\002" +
    "\uffe9\004\uffe9\007\uffe9\010\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\031\uffe9\033\uffe9\034\uffe9\035\uffe9\001\002\000" +
    "\032\002\uffef\004\uffef\007\uffef\010\uffef\015\uffef\016\uffef" +
    "\017\uffef\020\uffef\031\uffef\033\uffef\034\uffef\035\uffef\001" +
    "\002\000\032\002\ufff3\004\ufff3\007\ufff3\010\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\020\ufff3\031\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\001\002\000\032\002\uff8e\004\uff8e\007\uff8e\010\uff8e" +
    "\015\uff8e\016\uff8e\017\uff8e\020\uff8e\031\uff8e\033\uff8e\034" +
    "\uff8e\035\uff8e\001\002\000\032\002\uffed\004\uffed\007\uffed" +
    "\010\uffed\015\uffed\016\uffed\017\uffed\020\uffed\031\uffed\033" +
    "\uffed\034\uffed\035\uffed\001\002\000\032\002\ufff1\004\ufff1" +
    "\007\ufff1\010\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\031" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\001\002\000\032\002\uffeb" +
    "\004\uffeb\007\uffeb\010\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\031\uffeb\033\uffeb\034\uffeb\035\uffeb\001\002\000\006" +
    "\005\072\006\071\001\002\000\004\006\065\001\002\000" +
    "\032\003\024\004\006\007\067\010\012\015\007\016\015" +
    "\017\005\020\025\031\004\033\030\034\020\035\026\001" +
    "\002\000\030\004\006\007\070\010\012\015\007\016\015" +
    "\017\005\020\025\031\004\033\030\034\020\035\026\001" +
    "\002\000\032\002\uff94\004\uff94\007\uff94\010\uff94\015\uff94" +
    "\016\uff94\017\uff94\020\uff94\031\uff94\033\uff94\034\uff94\035" +
    "\uff94\001\002\000\032\002\uff8f\004\uff8f\007\uff8f\010\uff8f" +
    "\015\uff8f\016\uff8f\017\uff8f\020\uff8f\031\uff8f\033\uff8f\034" +
    "\uff8f\035\uff8f\001\002\000\032\003\024\004\006\007\103" +
    "\010\012\015\007\016\015\017\005\020\025\031\004\033" +
    "\030\034\020\035\026\001\002\000\034\003\024\004\006" +
    "\006\075\007\074\010\012\015\007\016\015\017\005\020" +
    "\025\031\004\033\030\034\020\035\026\001\002\000\030" +
    "\004\006\007\101\010\012\015\007\016\015\017\005\020" +
    "\025\031\004\033\030\034\020\035\026\001\002\000\032" +
    "\002\uff96\004\uff96\007\uff96\010\uff96\015\uff96\016\uff96\017" +
    "\uff96\020\uff96\031\uff96\033\uff96\034\uff96\035\uff96\001\002" +
    "\000\032\003\024\004\006\007\077\010\012\015\007\016" +
    "\015\017\005\020\025\031\004\033\030\034\020\035\026" +
    "\001\002\000\030\004\006\007\100\010\012\015\007\016" +
    "\015\017\005\020\025\031\004\033\030\034\020\035\026" +
    "\001\002\000\032\002\uff97\004\uff97\007\uff97\010\uff97\015" +
    "\uff97\016\uff97\017\uff97\020\uff97\031\uff97\033\uff97\034\uff97" +
    "\035\uff97\001\002\000\032\002\uff92\004\uff92\007\uff92\010" +
    "\uff92\015\uff92\016\uff92\017\uff92\020\uff92\031\uff92\033\uff92" +
    "\034\uff92\035\uff92\001\002\000\032\002\uff91\004\uff91\007" +
    "\uff91\010\uff91\015\uff91\016\uff91\017\uff91\020\uff91\031\uff91" +
    "\033\uff91\034\uff91\035\uff91\001\002\000\030\004\006\007" +
    "\104\010\012\015\007\016\015\017\005\020\025\031\004" +
    "\033\030\034\020\035\026\001\002\000\032\002\uff95\004" +
    "\uff95\007\uff95\010\uff95\015\uff95\016\uff95\017\uff95\020\uff95" +
    "\031\uff95\033\uff95\034\uff95\035\uff95\001\002\000\032\002" +
    "\uff90\004\uff90\007\uff90\010\uff90\015\uff90\016\uff90\017\uff90" +
    "\020\uff90\031\uff90\033\uff90\034\uff90\035\uff90\001\002\000" +
    "\010\005\uffae\006\uffae\012\uffae\001\002\000\006\011\uffd5" +
    "\050\uffd5\001\002\000\006\011\uffd4\050\uffd4\001\002\000" +
    "\006\011\uffd3\050\uffd3\001\002\000\014\011\122\043\113" +
    "\044\107\045\106\047\110\001\002\000\004\011\114\001" +
    "\002\000\006\011\uffd6\050\uffd6\001\002\000\004\050\115" +
    "\001\002\000\006\012\117\030\116\001\002\000\012\026" +
    "\046\046\042\047\037\050\043\001\002\000\032\002\uffe1" +
    "\004\uffe1\007\uffe1\010\uffe1\015\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\031\uffe1\033\uffe1\034\uffe1\035\uffe1\001\002\000\004" +
    "\012\121\001\002\000\032\002\uffd8\004\uffd8\007\uffd8\010" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\031\uffd8\033\uffd8" +
    "\034\uffd8\035\uffd8\001\002\000\004\050\146\001\002\000" +
    "\006\011\124\050\125\001\002\000\010\012\134\030\132" +
    "\050\133\001\002\000\006\012\127\030\126\001\002\000" +
    "\012\026\046\046\042\047\037\050\043\001\002\000\032" +
    "\002\uffe3\004\uffe3\007\uffe3\010\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\031\uffe3\033\uffe3\034\uffe3\035\uffe3\001\002" +
    "\000\004\012\131\001\002\000\032\002\uffda\004\uffda\007" +
    "\uffda\010\uffda\015\uffda\016\uffda\017\uffda\020\uffda\031\uffda" +
    "\033\uffda\034\uffda\035\uffda\001\002\000\012\026\046\046" +
    "\042\047\037\050\043\001\002\000\046\002\uffe5\004\uffe5" +
    "\007\uffe5\010\uffe5\012\137\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\026\046\030\136\031\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\046\042\047\037\050\043\001\002\000\032\002\uffe4\004" +
    "\uffe4\007\uffe4\010\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\031\uffe4\033\uffe4\034\uffe4\035\uffe4\001\002\000\004\012" +
    "\143\001\002\000\014\012\141\026\046\046\042\047\037" +
    "\050\043\001\002\000\032\002\uffe6\004\uffe6\007\uffe6\010" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\031\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\001\002\000\034\002\uffde\004\uffde\007" +
    "\uffde\010\uffde\012\142\015\uffde\016\uffde\017\uffde\020\uffde" +
    "\031\uffde\033\uffde\034\uffde\035\uffde\001\002\000\032\002" +
    "\uffdd\004\uffdd\007\uffdd\010\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\020\uffdd\031\uffdd\033\uffdd\034\uffdd\035\uffdd\001\002\000" +
    "\032\002\uffdf\004\uffdf\007\uffdf\010\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\031\uffdf\033\uffdf\034\uffdf\035\uffdf\001" +
    "\002\000\032\002\uffdc\004\uffdc\007\uffdc\010\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\031\uffdc\033\uffdc\034\uffdc\035" +
    "\uffdc\001\002\000\004\012\145\001\002\000\032\002\uffdb" +
    "\004\uffdb\007\uffdb\010\uffdb\015\uffdb\016\uffdb\017\uffdb\020" +
    "\uffdb\031\uffdb\033\uffdb\034\uffdb\035\uffdb\001\002\000\006" +
    "\012\150\030\147\001\002\000\012\026\046\046\042\047" +
    "\037\050\043\001\002\000\032\002\uffe2\004\uffe2\007\uffe2" +
    "\010\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\031\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\001\002\000\004\012\152\001\002" +
    "\000\032\002\uffd9\004\uffd9\007\uffd9\010\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\031\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\001\002\000\006\005\160\050\157\001\002\000\004\005" +
    "\155\001\002\000\004\012\156\001\002\000\032\002\uffbd" +
    "\004\uffbd\007\uffbd\010\uffbd\015\uffbd\016\uffbd\017\uffbd\020" +
    "\uffbd\031\uffbd\033\uffbd\034\uffbd\035\uffbd\001\002\000\006" +
    "\005\163\012\162\001\002\000\004\012\161\001\002\000" +
    "\032\002\uffbe\004\uffbe\007\uffbe\010\uffbe\015\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe\001" +
    "\002\000\032\002\uffbf\004\uffbf\007\uffbf\010\uffbf\015\uffbf" +
    "\016\uffbf\017\uffbf\020\uffbf\031\uffbf\033\uffbf\034\uffbf\035" +
    "\uffbf\001\002\000\034\002\uffc0\004\uffc0\007\uffc0\010\uffc0" +
    "\012\164\015\uffc0\016\uffc0\017\uffc0\020\uffc0\031\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\001\002\000\032\002\uffc1\004\uffc1" +
    "\007\uffc1\010\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\031" +
    "\uffc1\033\uffc1\034\uffc1\035\uffc1\001\002\000\004\002\000" +
    "\001\002\000\004\005\323\001\002\000\012\005\302\030" +
    "\170\043\172\050\171\001\002\000\004\047\274\001\002" +
    "\000\006\030\251\047\250\001\002\000\006\030\173\050" +
    "\174\001\002\000\004\047\243\001\002\000\006\030\176" +
    "\047\175\001\002\000\004\012\237\001\002\000\006\012" +
    "\200\047\177\001\002\000\016\012\227\025\034\026\041" +
    "\046\042\047\037\050\043\001\002\000\014\025\034\026" +
    "\041\046\042\047\037\050\043\001\002\000\004\012\202" +
    "\001\002\000\012\027\206\037\203\040\204\050\207\001" +
    "\002\000\006\037\223\050\224\001\002\000\006\040\220" +
    "\050\221\001\002\000\006\005\uff7d\006\uff7d\001\002\000" +
    "\004\047\217\001\002\000\012\027\213\037\210\040\211" +
    "\047\212\001\002\000\010\005\uff6e\006\uff6e\037\216\001" +
    "\002\000\010\005\uff69\006\uff69\040\215\001\002\000\006" +
    "\005\uff71\006\uff71\001\002\000\010\005\uff72\006\uff72\047" +
    "\214\001\002\000\006\005\uff73\006\uff73\001\002\000\006" +
    "\005\uff6a\006\uff6a\001\002\000\006\005\uff6f\006\uff6f\001" +
    "\002\000\006\005\uff70\006\uff70\001\002\000\010\005\uff68" +
    "\006\uff68\050\222\001\002\000\006\005\uff66\006\uff66\001" +
    "\002\000\006\005\uff67\006\uff67\001\002\000\010\005\uff6d" +
    "\006\uff6d\050\225\001\002\000\006\005\uff6b\006\uff6b\001" +
    "\002\000\006\005\uff6c\006\uff6c\001\002\000\004\012\235" +
    "\001\002\000\016\012\231\025\034\026\041\046\042\047" +
    "\037\050\043\001\002\000\004\012\233\001\002\000\012" +
    "\027\206\037\203\040\204\050\207\001\002\000\006\005" +
    "\uff7f\006\uff7f\001\002\000\016\005\uff80\006\uff80\027\206" +
    "\037\203\040\204\050\207\001\002\000\006\005\uff81\006" +
    "\uff81\001\002\000\012\027\206\037\203\040\204\050\207" +
    "\001\002\000\006\005\uff7e\006\uff7e\001\002\000\014\025" +
    "\034\026\041\046\042\047\037\050\043\001\002\000\004" +
    "\012\241\001\002\000\012\027\206\037\203\040\204\050" +
    "\207\001\002\000\006\005\uff7c\006\uff7c\001\002\000\004" +
    "\012\244\001\002\000\014\025\034\026\041\046\042\047" +
    "\037\050\043\001\002\000\004\012\246\001\002\000\012" +
    "\027\206\037\203\040\204\050\207\001\002\000\006\005" +
    "\uff7b\006\uff7b\001\002\000\004\012\270\001\002\000\006" +
    "\012\253\047\252\001\002\000\016\012\260\025\034\026" +
    "\041\046\042\047\037\050\043\001\002\000\014\025\034" +
    "\026\041\046\042\047\037\050\043\001\002\000\004\012" +
    "\255\001\002\000\012\027\206\037\203\040\204\050\207" +
    "\001\002\000\006\005\uff76\006\uff76\001\002\000\004\012" +
    "\266\001\002\000\016\012\262\025\034\026\041\046\042" +
    "\047\037\050\043\001\002\000\004\012\264\001\002\000" +
    "\012\027\206\037\203\040\204\050\207\001\002\000\006" +
    "\005\uff78\006\uff78\001\002\000\016\005\uff79\006\uff79\027" +
    "\206\037\203\040\204\050\207\001\002\000\006\005\uff7a" +
    "\006\uff7a\001\002\000\012\027\206\037\203\040\204\050" +
    "\207\001\002\000\006\005\uff77\006\uff77\001\002\000\014" +
    "\025\034\026\041\046\042\047\037\050\043\001\002\000" +
    "\004\012\272\001\002\000\012\027\206\037\203\040\204" +
    "\050\207\001\002\000\006\005\uff75\006\uff75\001\002\000" +
    "\004\012\275\001\002\000\014\025\034\026\041\046\042" +
    "\047\037\050\043\001\002\000\004\012\277\001\002\000" +
    "\012\027\206\037\203\040\204\050\207\001\002\000\006" +
    "\005\uff74\006\uff74\001\002\000\006\005\310\006\307\001" +
    "\002\000\004\006\303\001\002\000\032\003\024\004\006" +
    "\007\305\010\012\015\007\016\015\017\005\020\025\031" +
    "\004\033\030\034\020\035\026\001\002\000\030\004\006" +
    "\007\306\010\012\015\007\016\015\017\005\020\025\031" +
    "\004\033\030\034\020\035\026\001\002\000\032\002\uff8b" +
    "\004\uff8b\007\uff8b\010\uff8b\015\uff8b\016\uff8b\017\uff8b\020" +
    "\uff8b\031\uff8b\033\uff8b\034\uff8b\035\uff8b\001\002\000\032" +
    "\002\uff84\004\uff84\007\uff84\010\uff84\015\uff84\016\uff84\017" +
    "\uff84\020\uff84\031\uff84\033\uff84\034\uff84\035\uff84\001\002" +
    "\000\032\003\024\004\006\007\321\010\012\015\007\016" +
    "\015\017\005\020\025\031\004\033\030\034\020\035\026" +
    "\001\002\000\034\003\024\004\006\006\313\007\312\010" +
    "\012\015\007\016\015\017\005\020\025\031\004\033\030" +
    "\034\020\035\026\001\002\000\030\004\006\007\317\010" +
    "\012\015\007\016\015\017\005\020\025\031\004\033\030" +
    "\034\020\035\026\001\002\000\032\002\uff8d\004\uff8d\007" +
    "\uff8d\010\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\031\uff8d" +
    "\033\uff8d\034\uff8d\035\uff8d\001\002\000\032\003\024\004" +
    "\006\007\315\010\012\015\007\016\015\017\005\020\025" +
    "\031\004\033\030\034\020\035\026\001\002\000\030\004" +
    "\006\007\316\010\012\015\007\016\015\017\005\020\025" +
    "\031\004\033\030\034\020\035\026\001\002\000\032\002" +
    "\uff87\004\uff87\007\uff87\010\uff87\015\uff87\016\uff87\017\uff87" +
    "\020\uff87\031\uff87\033\uff87\034\uff87\035\uff87\001\002\000" +
    "\032\002\uff88\004\uff88\007\uff88\010\uff88\015\uff88\016\uff88" +
    "\017\uff88\020\uff88\031\uff88\033\uff88\034\uff88\035\uff88\001" +
    "\002\000\032\002\uff86\004\uff86\007\uff86\010\uff86\015\uff86" +
    "\016\uff86\017\uff86\020\uff86\031\uff86\033\uff86\034\uff86\035" +
    "\uff86\001\002\000\030\004\006\007\322\010\012\015\007" +
    "\016\015\017\005\020\025\031\004\033\030\034\020\035" +
    "\026\001\002\000\032\002\uff8c\004\uff8c\007\uff8c\010\uff8c" +
    "\015\uff8c\016\uff8c\017\uff8c\020\uff8c\031\uff8c\033\uff8c\034" +
    "\uff8c\035\uff8c\001\002\000\032\002\uff85\004\uff85\007\uff85" +
    "\010\uff85\015\uff85\016\uff85\017\uff85\020\uff85\031\uff85\033" +
    "\uff85\034\uff85\035\uff85\001\002\000\004\006\324\001\002" +
    "\000\032\003\024\004\006\007\326\010\012\015\007\016" +
    "\015\017\005\020\025\031\004\033\030\034\020\035\026" +
    "\001\002\000\030\004\006\007\327\010\012\015\007\016" +
    "\015\017\005\020\025\031\004\033\030\034\020\035\026" +
    "\001\002\000\032\002\uff8a\004\uff8a\007\uff8a\010\uff8a\015" +
    "\uff8a\016\uff8a\017\uff8a\020\uff8a\031\uff8a\033\uff8a\034\uff8a" +
    "\035\uff8a\001\002\000\032\002\uff83\004\uff83\007\uff83\010" +
    "\uff83\015\uff83\016\uff83\017\uff83\020\uff83\031\uff83\033\uff83" +
    "\034\uff83\035\uff83\001\002\000\032\002\ufff9\004\006\007" +
    "\332\010\012\015\007\016\015\017\005\020\025\031\004" +
    "\033\030\034\020\035\026\001\002\000\004\002\ufffd\001" +
    "\002\000\004\002\ufffa\001\002\000\006\005\340\050\337" +
    "\001\002\000\004\005\335\001\002\000\004\012\336\001" +
    "\002\000\032\002\uffc2\004\uffc2\007\uffc2\010\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\031\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\001\002\000\006\005\343\012\342\001\002\000\004" +
    "\012\341\001\002\000\032\002\uffc3\004\uffc3\007\uffc3\010" +
    "\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\031\uffc3\033\uffc3" +
    "\034\uffc3\035\uffc3\001\002\000\032\002\uffc4\004\uffc4\007" +
    "\uffc4\010\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\031\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\001\002\000\034\002\uffc5\004" +
    "\uffc5\007\uffc5\010\uffc5\012\344\015\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\031\uffc5\033\uffc5\034\uffc5\035\uffc5\001\002\000" +
    "\032\002\uffc6\004\uffc6\007\uffc6\010\uffc6\015\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\031\uffc6\033\uffc6\034\uffc6\035\uffc6\001" +
    "\002\000\004\002\ufff8\001\002\000\004\011\347\001\002" +
    "\000\004\050\350\001\002\000\006\012\352\030\351\001" +
    "\002\000\012\026\046\046\042\047\037\050\043\001\002" +
    "\000\032\002\uffe0\004\uffe0\007\uffe0\010\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\031\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\001\002\000\004\012\354\001\002\000\032\002\uffd7\004" +
    "\uffd7\007\uffd7\010\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\031\uffd7\033\uffd7\034\uffd7\035\uffd7\001\002\000\006\005" +
    "\362\050\361\001\002\000\004\005\357\001\002\000\004" +
    "\012\360\001\002\000\032\002\uffc7\004\uffc7\007\uffc7\010" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\031\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\001\002\000\006\005\365\012\364\001" +
    "\002\000\004\012\363\001\002\000\032\002\uffc8\004\uffc8" +
    "\007\uffc8\010\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\031" +
    "\uffc8\033\uffc8\034\uffc8\035\uffc8\001\002\000\032\002\uffc9" +
    "\004\uffc9\007\uffc9\010\uffc9\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\031\uffc9\033\uffc9\034\uffc9\035\uffc9\001\002\000\034" +
    "\002\uffca\004\uffca\007\uffca\010\uffca\012\366\015\uffca\016" +
    "\uffca\017\uffca\020\uffca\031\uffca\033\uffca\034\uffca\035\uffca" +
    "\001\002\000\032\002\uffcb\004\uffcb\007\uffcb\010\uffcb\015" +
    "\uffcb\016\uffcb\017\uffcb\020\uffcb\031\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\001\002\000\004\005\376\001\002\000\004\005" +
    "\374\001\002\000\010\005\372\030\251\047\250\001\002" +
    "\000\004\012\373\001\002\000\032\002\uffcc\004\uffcc\007" +
    "\uffcc\010\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\031\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\001\002\000\004\012\375\001" +
    "\002\000\032\002\uffcd\004\uffcd\007\uffcd\010\uffcd\015\uffcd" +
    "\016\uffcd\017\uffcd\020\uffcd\031\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\001\002\000\004\006\377\001\002\000\032\003\024" +
    "\004\006\007\u0101\010\012\015\007\016\015\017\005\020" +
    "\025\031\004\033\030\034\020\035\026\001\002\000\030" +
    "\004\006\007\u0102\010\012\015\007\016\015\017\005\020" +
    "\025\031\004\033\030\034\020\035\026\001\002\000\032" +
    "\002\uff89\004\uff89\007\uff89\010\uff89\015\uff89\016\uff89\017" +
    "\uff89\020\uff89\031\uff89\033\uff89\034\uff89\035\uff89\001\002" +
    "\000\032\002\uff82\004\uff82\007\uff82\010\uff82\015\uff82\016" +
    "\uff82\017\uff82\020\uff82\031\uff82\033\uff82\034\uff82\035\uff82" +
    "\001\002\000\006\005\u0108\046\u0107\001\002\000\004\005" +
    "\u0105\001\002\000\004\012\u0106\001\002\000\032\002\uffce" +
    "\004\uffce\007\uffce\010\uffce\015\uffce\016\uffce\017\uffce\020" +
    "\uffce\031\uffce\033\uffce\034\uffce\035\uffce\001\002\000\006" +
    "\005\u010b\012\u010a\001\002\000\004\012\u0109\001\002\000" +
    "\032\002\uffcf\004\uffcf\007\uffcf\010\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\031\uffcf\033\uffcf\034\uffcf\035\uffcf\001" +
    "\002\000\032\002\uffd0\004\uffd0\007\uffd0\010\uffd0\015\uffd0" +
    "\016\uffd0\017\uffd0\020\uffd0\031\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\001\002\000\034\002\uffd1\004\uffd1\007\uffd1\010\uffd1" +
    "\012\u010c\015\uffd1\016\uffd1\017\uffd1\020\uffd1\031\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\001\002\000\032\002\uffd2\004\uffd2" +
    "\007\uffd2\010\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\031" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\001\002\000\016\005\u011d" +
    "\025\034\026\041\046\042\047\037\050\043\001\002\000" +
    "\004\005\u010f\001\002\000\004\006\u0110\001\002\000\032" +
    "\003\024\004\006\007\u0112\010\012\015\007\016\015\017" +
    "\005\020\025\031\004\033\030\034\020\035\026\001\002" +
    "\000\030\004\006\007\u0116\010\012\015\007\016\015\017" +
    "\005\020\025\031\004\033\030\034\020\035\026\001\002" +
    "\000\034\002\uffb8\004\uffb8\007\uffb8\010\uffb8\015\uffb8\016" +
    "\uffb8\017\uffb8\020\uffb8\031\uffb8\032\u0113\033\uffb8\034\uffb8" +
    "\035\uffb8\001\002\000\004\006\u0114\001\002\000\004\007" +
    "\u0115\001\002\000\032\002\uffa7\004\uffa7\007\uffa7\010\uffa7" +
    "\015\uffa7\016\uffa7\017\uffa7\020\uffa7\031\uffa7\033\uffa7\034" +
    "\uffa7\035\uffa7\001\002\000\034\002\uffb3\004\uffb3\007\uffb3" +
    "\010\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\031\uffb3\032" +
    "\u0117\033\uffb3\034\uffb3\035\uffb3\001\002\000\004\006\u0118" +
    "\001\002\000\032\003\024\004\006\007\u011a\010\012\015" +
    "\007\016\015\017\005\020\025\031\004\033\030\034\020" +
    "\035\026\001\002\000\030\004\006\007\u011b\010\012\015" +
    "\007\016\015\017\005\020\025\031\004\033\030\034\020" +
    "\035\026\001\002\000\032\002\uffa1\004\uffa1\007\uffa1\010" +
    "\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\031\uffa1\033\uffa1" +
    "\034\uffa1\035\uffa1\001\002\000\032\002\uff98\004\uff98\007" +
    "\uff98\010\uff98\015\uff98\016\uff98\017\uff98\020\uff98\031\uff98" +
    "\033\uff98\034\uff98\035\uff98\001\002\000\006\005\u012b\006" +
    "\u012a\001\002\000\004\006\u011e\001\002\000\032\003\024" +
    "\004\006\007\u0120\010\012\015\007\016\015\017\005\020" +
    "\025\031\004\033\030\034\020\035\026\001\002\000\030" +
    "\004\006\007\u0124\010\012\015\007\016\015\017\005\020" +
    "\025\031\004\033\030\034\020\035\026\001\002\000\034" +
    "\002\uffb9\004\uffb9\007\uffb9\010\uffb9\015\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\031\uffb9\032\u0121\033\uffb9\034\uffb9\035\uffb9" +
    "\001\002\000\004\006\u0122\001\002\000\004\007\u0123\001" +
    "\002\000\032\002\uffa8\004\uffa8\007\uffa8\010\uffa8\015\uffa8" +
    "\016\uffa8\017\uffa8\020\uffa8\031\uffa8\033\uffa8\034\uffa8\035" +
    "\uffa8\001\002\000\034\002\uffb4\004\uffb4\007\uffb4\010\uffb4" +
    "\015\uffb4\016\uffb4\017\uffb4\020\uffb4\031\uffb4\032\u0125\033" +
    "\uffb4\034\uffb4\035\uffb4\001\002\000\004\006\u0126\001\002" +
    "\000\032\003\024\004\006\007\u0128\010\012\015\007\016" +
    "\015\017\005\020\025\031\004\033\030\034\020\035\026" +
    "\001\002\000\030\004\006\007\u0129\010\012\015\007\016" +
    "\015\017\005\020\025\031\004\033\030\034\020\035\026" +
    "\001\002\000\032\002\uffa2\004\uffa2\007\uffa2\010\uffa2\015" +
    "\uffa2\016\uffa2\017\uffa2\020\uffa2\031\uffa2\033\uffa2\034\uffa2" +
    "\035\uffa2\001\002\000\032\002\uff99\004\uff99\007\uff99\010" +
    "\uff99\015\uff99\016\uff99\017\uff99\020\uff99\031\uff99\033\uff99" +
    "\034\uff99\035\uff99\001\002\000\032\003\024\004\006\007" +
    "\u0150\010\012\015\007\016\015\017\005\020\025\031\004" +
    "\033\030\034\020\035\026\001\002\000\034\003\024\004" +
    "\006\006\u012e\007\u012d\010\012\015\007\016\015\017\005" +
    "\020\025\031\004\033\030\034\020\035\026\001\002\000" +
    "\030\004\006\007\u0149\010\012\015\007\016\015\017\005" +
    "\020\025\031\004\033\030\034\020\035\026\001\002\000" +
    "\032\002\uffbb\004\uffbb\007\uffbb\010\uffbb\015\uffbb\016\uffbb" +
    "\017\uffbb\020\uffbb\031\uffbb\033\uffbb\034\uffbb\035\uffbb\001" +
    "\002\000\034\003\024\004\006\007\u0131\010\012\015\007" +
    "\016\015\017\005\020\025\031\004\032\u0130\033\030\034" +
    "\020\035\026\001\002\000\030\004\006\007\u013c\010\012" +
    "\015\007\016\015\017\005\020\025\031\004\033\030\034" +
    "\020\035\026\001\002\000\004\006\u013a\001\002\000\036" +
    "\002\uffbc\004\uffbc\006\u0132\007\uffbc\010\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\031\uffbc\032\u0133\033\uffbc\034\uffbc" +
    "\035\uffbc\001\002\000\004\007\u0139\001\002\000\006\006" +
    "\u0135\007\u0134\001\002\000\032\002\uffac\004\uffac\007\uffac" +
    "\010\uffac\015\uffac\016\uffac\017\uffac\020\uffac\031\uffac\033" +
    "\uffac\034\uffac\035\uffac\001\002\000\032\003\024\004\006" +
    "\007\u0137\010\012\015\007\016\015\017\005\020\025\031" +
    "\004\033\030\034\020\035\026\001\002\000\030\004\006" +
    "\007\u0138\010\012\015\007\016\015\017\005\020\025\031" +
    "\004\033\030\034\020\035\026\001\002\000\032\002\uffad" +
    "\004\uffad\007\uffad\010\uffad\015\uffad\016\uffad\017\uffad\020" +
    "\uffad\031\uffad\033\uffad\034\uffad\035\uffad\001\002\000\032" +
    "\002\uff9c\004\uff9c\007\uff9c\010\uff9c\015\uff9c\016\uff9c\017" +
    "\uff9c\020\uff9c\031\uff9c\033\uff9c\034\uff9c\035\uff9c\001\002" +
    "\000\032\002\uffab\004\uffab\007\uffab\010\uffab\015\uffab\016" +
    "\uffab\017\uffab\020\uffab\031\uffab\033\uffab\034\uffab\035\uffab" +
    "\001\002\000\004\007\u013b\001\002\000\032\002\uffaa\004" +
    "\uffaa\007\uffaa\010\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\031\uffaa\033\uffaa\034\uffaa\035\uffaa\001\002\000\036\002" +
    "\uffb7\004\uffb7\006\u013d\007\uffb7\010\uffb7\015\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\031\uffb7\032\u013e\033\uffb7\034\uffb7\035" +
    "\uffb7\001\002\000\032\003\024\004\006\007\u0147\010\012" +
    "\015\007\016\015\017\005\020\025\031\004\033\030\034" +
    "\020\035\026\001\002\000\034\003\024\004\006\006\u0141" +
    "\007\u0140\010\012\015\007\016\015\017\005\020\025\031" +
    "\004\033\030\034\020\035\026\001\002\000\030\004\006" +
    "\007\u0145\010\012\015\007\016\015\017\005\020\025\031" +
    "\004\033\030\034\020\035\026\001\002\000\032\002\uffa6" +
    "\004\uffa6\007\uffa6\010\uffa6\015\uffa6\016\uffa6\017\uffa6\020" +
    "\uffa6\031\uffa6\033\uffa6\034\uffa6\035\uffa6\001\002\000\032" +
    "\003\024\004\006\007\u0143\010\012\015\007\016\015\017" +
    "\005\020\025\031\004\033\030\034\020\035\026\001\002" +
    "\000\030\004\006\007\u0144\010\012\015\007\016\015\017" +
    "\005\020\025\031\004\033\030\034\020\035\026\001\002" +
    "\000\032\002\uff9f\004\uff9f\007\uff9f\010\uff9f\015\uff9f\016" +
    "\uff9f\017\uff9f\020\uff9f\031\uff9f\033\uff9f\034\uff9f\035\uff9f" +
    "\001\002\000\032\002\uffa0\004\uffa0\007\uffa0\010\uffa0\015" +
    "\uffa0\016\uffa0\017\uffa0\020\uffa0\031\uffa0\033\uffa0\034\uffa0" +
    "\035\uffa0\001\002\000\032\002\uff9e\004\uff9e\007\uff9e\010" +
    "\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\031\uff9e\033\uff9e" +
    "\034\uff9e\035\uff9e\001\002\000\030\004\006\007\u0148\010" +
    "\012\015\007\016\015\017\005\020\025\031\004\033\030" +
    "\034\020\035\026\001\002\000\032\002\uffa5\004\uffa5\007" +
    "\uffa5\010\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\031\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\001\002\000\032\002\uff9d\004" +
    "\uff9d\007\uff9d\010\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d" +
    "\031\uff9d\033\uff9d\034\uff9d\035\uff9d\001\002\000\034\002" +
    "\uffb6\004\uffb6\007\uffb6\010\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\020\uffb6\031\uffb6\032\u014a\033\uffb6\034\uffb6\035\uffb6\001" +
    "\002\000\004\006\u014b\001\002\000\032\003\024\004\006" +
    "\007\u014d\010\012\015\007\016\015\017\005\020\025\031" +
    "\004\033\030\034\020\035\026\001\002\000\030\004\006" +
    "\007\u014e\010\012\015\007\016\015\017\005\020\025\031" +
    "\004\033\030\034\020\035\026\001\002\000\032\002\uffa4" +
    "\004\uffa4\007\uffa4\010\uffa4\015\uffa4\016\uffa4\017\uffa4\020" +
    "\uffa4\031\uffa4\033\uffa4\034\uffa4\035\uffa4\001\002\000\032" +
    "\002\uff9b\004\uff9b\007\uff9b\010\uff9b\015\uff9b\016\uff9b\017" +
    "\uff9b\020\uff9b\031\uff9b\033\uff9b\034\uff9b\035\uff9b\001\002" +
    "\000\030\004\006\007\u0154\010\012\015\007\016\015\017" +
    "\005\020\025\031\004\033\030\034\020\035\026\001\002" +
    "\000\034\002\uffba\004\uffba\007\uffba\010\uffba\015\uffba\016" +
    "\uffba\017\uffba\020\uffba\031\uffba\032\u0151\033\uffba\034\uffba" +
    "\035\uffba\001\002\000\004\006\u0152\001\002\000\004\007" +
    "\u0153\001\002\000\032\002\uffa9\004\uffa9\007\uffa9\010\uffa9" +
    "\015\uffa9\016\uffa9\017\uffa9\020\uffa9\031\uffa9\033\uffa9\034" +
    "\uffa9\035\uffa9\001\002\000\034\002\uffb5\004\uffb5\007\uffb5" +
    "\010\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\031\uffb5\032" +
    "\u0155\033\uffb5\034\uffb5\035\uffb5\001\002\000\004\006\u0156" +
    "\001\002\000\032\003\024\004\006\007\u0158\010\012\015" +
    "\007\016\015\017\005\020\025\031\004\033\030\034\020" +
    "\035\026\001\002\000\030\004\006\007\u0159\010\012\015" +
    "\007\016\015\017\005\020\025\031\004\033\030\034\020" +
    "\035\026\001\002\000\032\002\uffa3\004\uffa3\007\uffa3\010" +
    "\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\031\uffa3\033\uffa3" +
    "\034\uffa3\035\uffa3\001\002\000\032\002\uff9a\004\uff9a\007" +
    "\uff9a\010\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\031\uff9a" +
    "\033\uff9a\034\uff9a\035\uff9a\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0157\000\024\002\030\003\010\005\022\006\031\011" +
    "\021\012\012\013\026\016\013\017\007\001\001\000\006" +
    "\010\037\014\u010d\001\001\000\002\001\001\000\004\015" +
    "\366\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\345\001\001\000\002\001\001\000" +
    "\016\003\055\005\060\006\057\011\054\012\061\013\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\010\005\022\006\031\011\021\012\012\013\026\016\327" +
    "\001\001\000\004\015\165\001\001\000\022\003\010\005" +
    "\022\006\031\011\021\012\012\013\026\016\013\017\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\111\001\001\000\002" +
    "\001\001\000\006\010\037\014\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\104" +
    "\001\001\000\006\010\037\014\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\010\005\022\006" +
    "\031\011\021\012\012\013\026\016\051\001\001\000\016" +
    "\003\055\005\060\006\057\011\054\012\061\013\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\010\005\022\006\031\011\021\012" +
    "\012\013\026\016\065\001\001\000\016\003\055\005\060" +
    "\006\057\011\054\012\061\013\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\010\005\022\006\031" +
    "\011\021\012\012\013\026\016\101\001\001\000\020\003" +
    "\010\005\022\006\031\011\021\012\012\013\026\016\072" +
    "\001\001\000\016\003\055\005\060\006\057\011\054\012" +
    "\061\013\053\001\001\000\002\001\001\000\020\003\010" +
    "\005\022\006\031\011\021\012\012\013\026\016\075\001" +
    "\001\000\016\003\055\005\060\006\057\011\054\012\061" +
    "\013\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\055\005\060\006\057\011\054" +
    "\012\061\013\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\143\001\001\000\004\010\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\037\014\225\001\001\000\006\010" +
    "\037\014\200\001\001\000\002\001\001\000\004\004\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\037\014\227\001\001\000" +
    "\002\001\001\000\004\004\231\001\001\000\002\001\001" +
    "\000\004\004\233\001\001\000\002\001\001\000\004\004" +
    "\235\001\001\000\002\001\001\000\006\010\037\014\237" +
    "\001\001\000\002\001\001\000\004\004\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\037\014\244" +
    "\001\001\000\002\001\001\000\004\004\246\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\037\014\256\001\001\000\006\010\037\014\253\001" +
    "\001\000\002\001\001\000\004\004\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\037\014\260\001" +
    "\001\000\002\001\001\000\004\004\262\001\001\000\002" +
    "\001\001\000\004\004\264\001\001\000\002\001\001\000" +
    "\004\004\266\001\001\000\002\001\001\000\006\010\037" +
    "\014\270\001\001\000\002\001\001\000\004\004\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\037" +
    "\014\275\001\001\000\002\001\001\000\004\004\277\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\010\005\022\006\031\011\021\012\012\013" +
    "\026\016\303\001\001\000\016\003\055\005\060\006\057" +
    "\011\054\012\061\013\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\010\005\022\006\031\011\021" +
    "\012\012\013\026\016\317\001\001\000\020\003\010\005" +
    "\022\006\031\011\021\012\012\013\026\016\310\001\001" +
    "\000\016\003\055\005\060\006\057\011\054\012\061\013" +
    "\053\001\001\000\002\001\001\000\020\003\010\005\022" +
    "\006\031\011\021\012\012\013\026\016\313\001\001\000" +
    "\016\003\055\005\060\006\057\011\054\012\061\013\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\055\005\060\006\057\011\054\012\061" +
    "\013\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\010\005\022\006\031\011\021" +
    "\012\012\013\026\016\324\001\001\000\016\003\055\005" +
    "\060\006\057\011\054\012\061\013\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\055\005\060\006" +
    "\057\011\054\012\061\013\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\352\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\010\005\022" +
    "\006\031\011\021\012\012\013\026\016\377\001\001\000" +
    "\016\003\055\005\060\006\057\011\054\012\061\013\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\037\014\u011b\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\010\005\022\006\031\011\021\012\012" +
    "\013\026\016\u0110\001\001\000\016\003\055\005\060\006" +
    "\057\011\054\012\061\013\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\010\005\022" +
    "\006\031\011\021\012\012\013\026\016\u0118\001\001\000" +
    "\016\003\055\005\060\006\057\011\054\012\061\013\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\010\005\022\006\031" +
    "\011\021\012\012\013\026\016\u011e\001\001\000\016\003" +
    "\055\005\060\006\057\011\054\012\061\013\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\010\005\022\006\031\011\021\012\012\013\026\016" +
    "\u0126\001\001\000\016\003\055\005\060\006\057\011\054" +
    "\012\061\013\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\010\005\022\006\031\011\021\012\012" +
    "\013\026\016\u014e\001\001\000\020\003\010\005\022\006" +
    "\031\011\021\012\012\013\026\016\u012b\001\001\000\016" +
    "\003\055\005\060\006\057\011\054\012\061\013\053\001" +
    "\001\000\002\001\001\000\020\003\010\005\022\006\031" +
    "\011\021\012\012\013\026\016\u012e\001\001\000\016\003" +
    "\055\005\060\006\057\011\054\012\061\013\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\010\005\022" +
    "\006\031\011\021\012\012\013\026\016\u0135\001\001\000" +
    "\016\003\055\005\060\006\057\011\054\012\061\013\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\010\005\022\006\031\011\021\012\012\013" +
    "\026\016\u0145\001\001\000\020\003\010\005\022\006\031" +
    "\011\021\012\012\013\026\016\u013e\001\001\000\016\003" +
    "\055\005\060\006\057\011\054\012\061\013\053\001\001" +
    "\000\002\001\001\000\020\003\010\005\022\006\031\011" +
    "\021\012\012\013\026\016\u0141\001\001\000\016\003\055" +
    "\005\060\006\057\011\054\012\061\013\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\055\005\060\006\057\011\054\012\061\013\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\010\005\022\006\031\011" +
    "\021\012\012\013\026\016\u014b\001\001\000\016\003\055" +
    "\005\060\006\057\011\054\012\061\013\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\055\005\060" +
    "\006\057\011\054\012\061\013\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\010\005" +
    "\022\006\031\011\021\012\012\013\026\016\u0156\001\001" +
    "\000\016\003\055\005\060\006\057\011\054\012\061\013" +
    "\053\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

  public void unrecovered_syntax_error(Symbol cur_token)
    {
        errores.add(new ErrorLexSint("Error sintáctico", s.right+1, "Sintaxis incorrecta, verificar la documentación del lenguaje BraillePrint"));
    }
    public ArrayList<ErrorLexSint> errores = Compilador.listaErrores;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Campotrabajo CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Campotrabajo 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(1,"","Error sintáctico", sright+1, sleft+1, "Creación de cuerpo de instrucción no definida"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= CUERPO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(2,"","Error sintáctico", sright+1, sleft+1, "Sección de inicialización incorrecta, palabra reservada camptrab no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= Llave_a 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(3,"","Error sintáctico", sright+1, sleft+1, "Llave de cierre no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(4,"","Error sintáctico", sright+1, sleft+1, "Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= Llave_a SENTENCIAS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(3,"","Error sintáctico", sright+1, sleft+1, "Llave de cierre no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO ::= SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(4,"","Error sintáctico", sright+1, sleft+1, "Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VALOR ::= Num_Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VALOR ::= Texto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VALOR ::= Op_Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VALOR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIAS ::= SENTENCIAS DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIAS ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIAS ::= SENTENCIAS SI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS ::= SI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIAS ::= SENTENCIAS ALTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIAS ::= ALTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAS ::= SENTENCIAS FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAS ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIAS ::= SENTENCIAS CICLOMIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIAS ::= CICLOMIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIAS ::= SENTENCIAS CICLOFOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIAS ::= CICLOFOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIAS ::= error 
            {
              Object RESULT =null;
		errores.add(new ErrorLexSint("Error sintáctico", s.right+1, "Sintaxis incorrecta, verificar la documentación del lenguaje BraillePrint"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Declarar Corchete_a TDATO Corchete_c Identificador Punto_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Declarar Corchete_a TDATO Corchete_c Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(5,"","Error sintáctico", sright+1, sleft+1, "Finalizacion de sentencia incorrecta, ';' no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Declarar Corchete_a TDATO Corchete_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(13,"","Error sintáctico", sright+1, sleft+1, "Declaración incorrecta, identificador no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Declarar Corchete_a TDATO Identificador Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(9,"","Error sintáctico", sright+1, sleft+1, "Declaración incorrecta, corchete de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Declarar Corchete_a Corchete_c Identificador Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(11,"","Error sintáctico", sright+1, sleft+1, "Declaración incorrecta, tipo de dato no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Declarar TDATO Corchete_c Identificador Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		errores.add(new ErrorLexSint(10,"","Error sintáctico", sright+1, sleft+1, "Declaración incorrecta, corchete de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Corchete_a TDATO Corchete_c Identificador Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		errores.add(new ErrorLexSint(12,"","Error sintáctico", sright+1, sleft+1, "Declaración incorrecta, palabra reservada 'declarar' no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Declarar Corchete_a TDATO Corchete_c Identificador Asignacion VALOR Punto_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Declarar Corchete_a TDATO Corchete_c Identificador Asignacion VALOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(5,"","Error sintáctico", sright+1, sleft+1, "Finalizacion de sentencia incorrecta, ';' no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Declarar Corchete_a TDATO Corchete_c Identificador Asignacion Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(6,"","Error sintáctico", sright+1, sleft+1, "Asignación incorrecta, valor no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Declarar Corchete_a TDATO Corchete_c Identificador VALOR Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(7,"","Error sintáctico", sright+1, sleft+1, "Asignación incorrecta, operador de asignación no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Declarar Corchete_a TDATO Corchete_c Asignacion VALOR Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(8,"","Error sintáctico", sright+1, sleft+1, "Asignación incorrecta, identificador no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Declarar Corchete_a TDATO Identificador Asignacion VALOR Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		errores.add(new ErrorLexSint(9,"","Error sintáctico", sright+1, sleft+1, "Declaración incorrecta, corchete de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Declarar Corchete_a Corchete_c Identificador Asignacion VALOR Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		errores.add(new ErrorLexSint(11,"","Error sintáctico", sright+1, sleft+1, "Declaración incorrecta, tipo de dato no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Declarar TDATO Corchete_c Identificador Asignacion VALOR Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		errores.add(new ErrorLexSint(10,"","Error sintáctico", sright+1, sleft+1, "Declaración incorrecta, corchete de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Corchete_a TDATO Corchete_c Identificador Asignacion VALOR Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		errores.add(new ErrorLexSint(12,"","Error sintáctico", sright+1, sleft+1, "Declaración incorrecta, palabra reservada 'declarar' no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TDATO ::= Entero 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TDATO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TDATO ::= Flotante 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TDATO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TDATO ::= VarCar 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TDATO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TDATO ::= Num_Entero 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TDATO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNCION ::= func_ValCad Parentesis_a Texto Parentesis_c Punto_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FUNCION ::= func_ValCad Parentesis_a Texto Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(5,"","Error sintáctico", sright+1, sleft+1, "Finalizacion de sentencia incorrecta, ';' no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FUNCION ::= func_ValCad Parentesis_a Texto Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(16,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FUNCION ::= func_ValCad Parentesis_a Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(14,"","Error sintáctico", sright+1, sleft+1, "Parámetro inválido o no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FUNCION ::= func_ValCad Texto Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(17,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FUNCION ::= Parentesis_a Texto Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(15,"","Error sintáctico", sright+1, sleft+1, "Formato inválido de posible función, nombre incorrecto o no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FUNCION ::= Parentesis_a Identificador Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(15,"","Error sintáctico", sright+1, sleft+1, "Formato inválido de posible función, nombre incorrecto o no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FUNCION ::= func_Ver Parentesis_a Identificador Parentesis_c Punto_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FUNCION ::= func_Ver Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(5,"","Error sintáctico", sright+1, sleft+1, "Finalizacion de sentencia incorrecta, ';' no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FUNCION ::= func_Ver Parentesis_a Identificador Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(16,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FUNCION ::= func_Ver Parentesis_a Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(14,"","Error sintáctico", sright+1, sleft+1, "Parámetro inválido o no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FUNCION ::= func_Ver Identificador Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(17,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FUNCION ::= func_ContCarac Parentesis_a Identificador Parentesis_c Punto_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FUNCION ::= func_ContCarac Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(5,"","Error sintáctico", sright+1, sleft+1, "Finalizacion de sentencia incorrecta, ';' no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNCION ::= func_ContCarac Parentesis_a Identificador Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(16,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNCION ::= func_ContCarac Parentesis_a Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(14,"","Error sintáctico", sright+1, sleft+1, "Parámetro inválido o no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNCION ::= func_ContCarac Identificador Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(17,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUNCION ::= func_Imprimir Parentesis_a Identificador Parentesis_c Punto_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNCION ::= func_Imprimir Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(5,"","Error sintáctico", sright+1, sleft+1, "Finalizacion de sentencia incorrecta, ';' no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNCION ::= func_Imprimir Parentesis_a Identificador Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(16,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FUNCION ::= func_Imprimir Parentesis_a Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(14,"","Error sintáctico", sright+1, sleft+1, "Parámetro inválido o no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNCION ::= func_Imprimir Identificador Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(17,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SI ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SI ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(4,"","Error sintáctico", sright+1, sleft+1, "Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SI ::= Si Parentesis_a SENTENCIA_BOOLEANA Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(16,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SI ::= Si Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(18,"","Error sintáctico", sright+1, sleft+1, "Sentencia/parámetro inválidos o no encontrados"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SI ::= Si SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		errores.add(new ErrorLexSint(17,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SI ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SI ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(4,"","Error sintáctico", sright+1, sleft+1, "Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SI ::= Si Parentesis_a SENTENCIA_BOOLEANA Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(16,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SI ::= Si Parentesis_a Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		errores.add(new ErrorLexSint(18,"","Error sintáctico", sright+1, sleft+1, "Sentencia/parámetro inválidos o no encontrados"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SI ::= Si SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		errores.add(new ErrorLexSint(17,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA_BOOLEANA ::= Op_Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA_BOOLEANA ::= VALOR Op_Relacional VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA_BOOLEANA ::= VALOR Op_Relacional 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(19,"","Error sintáctico", sright+1, sleft+1, "Valor no encontrado, posibles esperados: Op_Booleano, identificador, Num_Entero, Texto"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA_BOOLEANA ::= VALOR VALOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(20,"","Error sintáctico", sright+1, sleft+1, "Operador relacional inválido o no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA_BOOLEANA ::= Op_Relacional VALOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(19,"","Error sintáctico", sright+1, sleft+1, "Valor no encontrado, posibles esperados: Op_Booleano, identificador, Num_Entero, Texto"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c Alter Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c Alter Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(36,"","Error sintáctico", sright+1, sleft+1, "Alter, Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(37,"","Error sintáctico", sright+1, sleft+1, "Ausencia de 'Alter' o exceso de llaves"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Alter Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(35,"","Error sintáctico", sright+1, sleft+1, "Alter, Llave de cierre no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Llave_a Llave_c Alter Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		errores.add(new ErrorLexSint(16,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ALTER ::= Si Parentesis_a Parentesis_c Llave_a Llave_c Alter Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		errores.add(new ErrorLexSint(18,"","Error sintáctico", sright+1, sleft+1, "Sentencia/parámetro inválidos o no encontrados"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ALTER ::= Si SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c Alter Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		errores.add(new ErrorLexSint(17,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c Alter Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(36,"","Error sintáctico", sright+1, sleft+1, "Alter, Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(37,"","Error sintáctico", sright+1, sleft+1, "Ausencia de 'Alter' o exceso de llaves"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c SENTENCIAS Llave_c Alter Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		errores.add(new ErrorLexSint(36,"","Error sintáctico", sright+1, sleft+1, "Alter, Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Llave_a SENTENCIAS Llave_c Alter Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		errores.add(new ErrorLexSint(16,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ALTER ::= Si Parentesis_a Parentesis_c Llave_a SENTENCIAS Llave_c Alter Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		errores.add(new ErrorLexSint(18,"","Error sintáctico", sright+1, sleft+1, "Sentencia/parámetro inválidos o no encontrados"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ALTER ::= Si SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c Alter Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		errores.add(new ErrorLexSint(17,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c Alter Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c Alter Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(35,"","Error sintáctico", sright+1, sleft+1, "Alter, Sentencias no definidas"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c Alter SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(36,"","Error sintáctico", sright+1, sleft+1, "Alter, Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(37,"","Error sintáctico", sright+1, sleft+1, "Ausencia de 'Alter' o exceso de llaves"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c Alter Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		errores.add(new ErrorLexSint(35,"","Error sintáctico", sright+1, sleft+1, "Alter, Sin sentencias"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c SENTENCIAS Llave_c Alter Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		errores.add(new ErrorLexSint(36,"","Error sintáctico", sright+1, sleft+1, "Alter, Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Llave_a SENTENCIAS Llave_c Alter Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		errores.add(new ErrorLexSint(16,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ALTER ::= Si Parentesis_a Parentesis_c Llave_a SENTENCIAS Llave_c Alter Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		errores.add(new ErrorLexSint(18,"","Error sintáctico", sright+1, sleft+1, "Sentencia/parámetro inválidos o no encontrados"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ALTER ::= Si SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c Alter Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		errores.add(new ErrorLexSint(17,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CICLOMIENTRAS ::= CicloMientras Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CICLOMIENTRAS ::= CicloMientras Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(40,"","Error sintáctico", sright+1, sleft+1, "cicloMientras, Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CICLOMIENTRAS ::= CicloMientras Parentesis_a SENTENCIA_BOOLEANA Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(41,"","Error sintáctico", sright+1, sleft+1, "cicloMientras, Parentesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CICLOMIENTRAS ::= CicloMientras Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(42,"","Error sintáctico", sright+1, sleft+1, "cicloMientras, Sentencia booleana no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CICLOMIENTRAS ::= CicloMientras SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		errores.add(new ErrorLexSint(43,"","Error sintáctico", sright+1, sleft+1, "cicloMientras, Parentesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CICLOMIENTRAS ::= CicloMientras Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CICLOMIENTRAS ::= CicloMientras Parentesis_a SENTENCIA_BOOLEANA Parentesis_c SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(40,"","Error sintáctico", sright+1, sleft+1, "cicloMientras, Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CICLOMIENTRAS ::= CicloMientras Parentesis_a SENTENCIA_BOOLEANA Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(41,"","Error sintáctico", sright+1, sleft+1, "cicloMientras, Parentesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CICLOMIENTRAS ::= CicloMientras Parentesis_a Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		errores.add(new ErrorLexSint(42,"","Error sintáctico", sright+1, sleft+1, "cicloMientras, Sentencia booleana no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CICLOMIENTRAS ::= CicloMientras SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		errores.add(new ErrorLexSint(43,"","Error sintáctico", sright+1, sleft+1, "cicloMientras, Parentesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CICLOFOR ::= CicloFor Parentesis_a SENTENCIA_FOR Parentesis_c Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(30,"","Error sintáctico", sright+1, sleft+1, "Ciclofor, Llave apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CICLOFOR ::= CicloFor Parentesis_a SENTENCIA_FOR Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(31,"","Error sintáctico", sright+1, sleft+1, "Ciclofor, Paréntesis cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CICLOFOR ::= CicloFor Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(33,"","Error sintáctico", sright+1, sleft+1, "Ciclofor, SENTENCIA_FOR no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CICLOFOR ::= CicloFor SENTENCIA_FOR Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		errores.add(new ErrorLexSint(32,"","Error sintáctico", sright+1, sleft+1, "Ciclofor, Paréntesis apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CICLOFOR ::= Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		errores.add(new ErrorLexSint(33,"","Error sintáctico", sright+1, sleft+1, "Ciclofor, palabra 'ciclofor' no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CICLOFOR ::= CicloFor Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CICLOFOR ::= CicloFor Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(34,"","Error sintáctico", sright+1, sleft+1, "Ciclofor, SENTENCIAS no encontradas"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CICLOFOR ::= CicloFor Parentesis_a SENTENCIA_FOR Parentesis_c SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(30,"","Error sintáctico", sright+1, sleft+1, "Ciclofor, Llave apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CICLOFOR ::= CicloFor Parentesis_a SENTENCIA_FOR Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(31,"","Error sintáctico", sright+1, sleft+1, "Ciclofor, Paréntesis cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CICLOFOR ::= CicloFor Parentesis_a Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		errores.add(new ErrorLexSint(33,"","Error sintáctico", sright+1, sleft+1, "Ciclofor, SENTENCIA_FOR no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CICLOFOR ::= CicloFor SENTENCIA_FOR Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		errores.add(new ErrorLexSint(32,"","Error sintáctico", sright+1, sleft+1, "Ciclofor, Paréntesis apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CICLOFOR ::= Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		errores.add(new ErrorLexSint(33,"","Error sintáctico", sright+1, sleft+1, "Ciclofor, palabra 'ciclofor' no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SENTENCIA_FOR ::= Entero Identificador Asignacion Num_Entero Punto_Coma SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SENTENCIA_FOR ::= Entero Identificador Asignacion Num_Entero Punto_Coma SENTENCIA_BOOLEANA Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(24,"","Error sintáctico", sright+1, sleft+1, "Sentencia ciclofor, declaración_for no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SENTENCIA_FOR ::= Entero Identificador Asignacion Num_Entero Punto_Coma Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(26,"","Error sintáctico", sright+1, sleft+1, "Sentencia ciclofor, sentencia_booleana no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SENTENCIA_FOR ::= Entero Identificador Asignacion Num_Entero SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(25,"","Error sintáctico", sright+1, sleft+1, "Sentencia ciclofor, ';' no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SENTENCIA_FOR ::= Entero Identificador Asignacion Punto_Coma SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		errores.add(new ErrorLexSint(26,"","Error sintáctico", sright+1, sleft+1, "Sentencia ciclofor, numero entero no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SENTENCIA_FOR ::= Entero Identificador Num_Entero Punto_Coma SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		errores.add(new ErrorLexSint(27,"","Error sintáctico", sright+1, sleft+1, "Sentencia ciclofor, Operador asignación no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SENTENCIA_FOR ::= Entero Asignacion Num_Entero Punto_Coma SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		errores.add(new ErrorLexSint(28,"","Error sintáctico", sright+1, sleft+1, "Sentencia ciclofor, Identificador no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SENTENCIA_FOR ::= Identificador Asignacion Num_Entero Punto_Coma SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SENTENCIA_FOR ::= Identificador Asignacion Num_Entero Punto_Coma SENTENCIA_BOOLEANA Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(24,"","Error sintáctico", sright+1, sleft+1, "Sentencia ciclofor, declaración_for no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SENTENCIA_FOR ::= Identificador Asignacion Num_Entero Punto_Coma Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(26,"","Error sintáctico", sright+1, sleft+1, "Sentencia ciclofor, sentencia_booleana no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SENTENCIA_FOR ::= Identificador Asignacion Num_Entero SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(25,"","Error sintáctico", sright+1, sleft+1, "Sentencia ciclofor, ';' no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SENTENCIA_FOR ::= Identificador Asignacion Punto_Coma SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		errores.add(new ErrorLexSint(26,"","Error sintáctico", sright+1, sleft+1, "Sentencia ciclofor, numero entero no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SENTENCIA_FOR ::= Identificador Num_Entero Punto_Coma SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		errores.add(new ErrorLexSint(27,"","Error sintáctico", sright+1, sleft+1, "Sentencia ciclofor, Operador asignación no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SENTENCIA_FOR ::= Asignacion Num_Entero Punto_Coma SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		errores.add(new ErrorLexSint(28,"","Error sintáctico", sright+1, sleft+1, "Sentencia ciclofor, Identificador no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DECLARACION_FOR ::= Identificador Op_Atribucion Num_Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // DECLARACION_FOR ::= Identificador Op_Atribucion 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(19,"","Error sintáctico", sright+1, sleft+1, "Declaración ciclofor, número no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // DECLARACION_FOR ::= Identificador Num_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(20,"","Error sintáctico", sright+1, sleft+1, "Declaración ciclofor, Op_atribución no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // DECLARACION_FOR ::= Op_Atribucion Num_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(21,"","Error sintáctico", sright+1, sleft+1, "Declaración ciclofor, identificador no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // DECLARACION_FOR ::= Identificador Adicion Adicion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DECLARACION_FOR ::= Identificador Adicion 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(22,"","Error sintáctico", sright+1, sleft+1, "Declaración ciclofor, operador adición no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // DECLARACION_FOR ::= Adicion Adicion 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(21,"","Error sintáctico", sright+1, sleft+1, "Declaración ciclofor, identificador no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // DECLARACION_FOR ::= Adicion Adicion Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // DECLARACION_FOR ::= Adicion Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(22,"","Error sintáctico", sright+1, sleft+1, "Declaración ciclofor, operador adición no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // DECLARACION_FOR ::= Identificador Sustraccion Sustraccion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // DECLARACION_FOR ::= Identificador Sustraccion 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(23,"","Error sintáctico", sright+1, sleft+1, "Declaración ciclofor, operador sustracción no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // DECLARACION_FOR ::= Sustraccion Sustraccion 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(21,"","Error sintáctico", sright+1, sleft+1, "Declaración ciclofor, identificador no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // DECLARACION_FOR ::= Sustraccion Sustraccion Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // DECLARACION_FOR ::= Sustraccion Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(23,"","Error sintáctico", sright+1, sleft+1, "Declaración ciclofor, operador sustracción no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
