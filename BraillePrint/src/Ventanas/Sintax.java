
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package Ventanas;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\017\004\000\002\017\003" +
    "\000\002\017\003\000\002\017\005\000\002\017\004\000" +
    "\002\017\004\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\016\004\000\002\016" +
    "\003\000\002\016\004\000\002\016\003\000\002\016\004" +
    "\000\002\016\003\000\002\016\004\000\002\016\003\000" +
    "\002\016\004\000\002\016\003\000\002\016\004\000\002" +
    "\016\003\000\002\003\010\000\002\003\007\000\002\003" +
    "\007\000\002\003\007\000\002\003\007\000\002\003\007" +
    "\000\002\003\007\000\002\003\012\000\002\003\011\000" +
    "\002\003\011\000\002\003\011\000\002\003\011\000\002" +
    "\003\011\000\002\003\011\000\002\003\011\000\002\003" +
    "\011\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\006\007\000\002\006\006\000" +
    "\002\006\006\000\002\006\006\000\002\006\006\000\002" +
    "\006\006\000\002\006\007\000\002\006\006\000\002\006" +
    "\006\000\002\006\006\000\002\006\006\000\002\006\007" +
    "\000\002\006\006\000\002\006\006\000\002\006\006\000" +
    "\002\006\006\000\002\006\007\000\002\006\006\000\002" +
    "\006\006\000\002\006\006\000\002\006\006\000\002\005" +
    "\010\000\002\005\007\000\002\005\007\000\002\005\007" +
    "\000\002\005\007\000\002\005\011\000\002\005\010\000" +
    "\002\005\010\000\002\005\010\000\002\005\010\000\002" +
    "\014\003\000\002\014\005\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\011\013\000\002\011\014" +
    "\000\002\011\015\000\002\012\010\000\002\012\011\000" +
    "\002\013\010\000\002\013\011\000\002\015\012\000\002" +
    "\015\011\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\034\004\006\006\017\007\016\010\013\015" +
    "\007\016\015\017\005\020\024\031\004\033\027\034\020" +
    "\035\025\036\021\001\002\000\016\004\262\025\034\026" +
    "\040\046\041\047\036\050\042\001\002\000\006\004\250" +
    "\046\251\001\002\000\004\046\245\001\002\000\006\004" +
    "\233\050\234\001\002\000\004\002\ufffe\001\002\000\032" +
    "\002\ufff2\004\ufff2\007\ufff2\010\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\031\ufff2\033\ufff2\034\ufff2\035\ufff2\001\002" +
    "\000\032\002\uffea\004\uffea\007\uffea\010\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\031\uffea\033\uffea\034\uffea\035\uffea" +
    "\001\002\000\012\043\070\044\063\045\064\047\065\001" +
    "\002\000\030\004\006\007\223\010\013\015\007\016\015" +
    "\017\005\020\024\031\004\033\027\034\020\035\025\001" +
    "\002\000\006\004\211\050\212\001\002\000\004\002\ufffb" +
    "\001\002\000\032\002\ufffc\004\006\007\207\010\013\015" +
    "\007\016\015\017\005\020\024\031\004\033\027\034\020" +
    "\035\025\001\002\000\004\004\143\001\002\000\034\002" +
    "\uffff\004\006\006\017\007\016\010\013\015\007\016\015" +
    "\017\005\020\024\031\004\033\027\034\020\035\025\001" +
    "\002\000\032\002\uffee\004\uffee\007\uffee\010\uffee\015\uffee" +
    "\016\uffee\017\uffee\020\uffee\031\uffee\033\uffee\034\uffee\035" +
    "\uffee\001\002\000\032\002\ufff0\004\ufff0\007\ufff0\010\ufff0" +
    "\015\ufff0\016\ufff0\017\ufff0\020\ufff0\031\ufff0\033\ufff0\034" +
    "\ufff0\035\ufff0\001\002\000\006\004\130\050\131\001\002" +
    "\000\014\010\066\043\070\044\063\045\064\047\065\001" +
    "\002\000\032\002\uffe8\004\uffe8\007\uffe8\010\uffe8\015\uffe8" +
    "\016\uffe8\017\uffe8\020\uffe8\031\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\001\002\000\004\004\033\001\002\000\004\002\032" +
    "\001\002\000\032\002\uffec\004\uffec\007\uffec\010\uffec\015" +
    "\uffec\016\uffec\017\uffec\020\uffec\031\uffec\033\uffec\034\uffec" +
    "\035\uffec\001\002\000\004\002\001\001\002\000\014\025" +
    "\034\026\040\046\041\047\036\050\042\001\002\000\012" +
    "\026\045\046\041\047\036\050\042\001\002\000\004\005" +
    "\047\001\002\000\052\002\ufff7\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\012\ufff7\015\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\025\ufff7\026\ufff7\031\ufff7\033\ufff7\034\ufff7\035\ufff7" +
    "\046\ufff7\047\ufff7\050\ufff7\001\002\000\014\025\043\026" +
    "\045\046\041\047\036\050\042\001\002\000\022\005\uffb4" +
    "\006\uffb4\012\uffb4\025\ufff5\026\ufff5\046\ufff5\047\ufff5\050" +
    "\ufff5\001\002\000\052\002\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\012\ufff6\015\ufff6\016\ufff6\017\ufff6\020" +
    "\ufff6\025\ufff6\026\ufff6\031\ufff6\033\ufff6\034\ufff6\035\ufff6" +
    "\046\ufff6\047\ufff6\050\ufff6\001\002\000\052\002\ufff4\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\012\ufff4\015\ufff4" +
    "\016\ufff4\017\ufff4\020\ufff4\025\ufff4\026\ufff4\031\ufff4\033" +
    "\ufff4\034\ufff4\035\ufff4\046\ufff4\047\ufff4\050\ufff4\001\002" +
    "\000\020\005\uffb2\006\uffb2\012\uffb2\026\045\046\041\047" +
    "\036\050\042\001\002\000\010\005\uffb1\006\uffb1\012\uffb1" +
    "\001\002\000\040\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007" +
    "\ufff5\010\ufff5\012\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\031\ufff5\033\ufff5\034\ufff5\035\ufff5\001\002\000\010\005" +
    "\uffb3\006\uffb3\012\uffb3\001\002\000\004\006\050\001\002" +
    "\000\030\004\006\007\052\010\013\015\007\016\015\017" +
    "\005\020\024\031\004\033\027\034\020\035\025\001\002" +
    "\000\030\004\006\007\056\010\013\015\007\016\015\017" +
    "\005\020\024\031\004\033\027\034\020\035\025\001\002" +
    "\000\032\002\uffac\004\uffac\007\uffac\010\uffac\015\uffac\016" +
    "\uffac\017\uffac\020\uffac\031\uffac\033\uffac\034\uffac\035\uffac" +
    "\001\002\000\032\002\uffe9\004\uffe9\007\uffe9\010\uffe9\015" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\031\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\001\002\000\032\002\uffef\004\uffef\007\uffef\010" +
    "\uffef\015\uffef\016\uffef\017\uffef\020\uffef\031\uffef\033\uffef" +
    "\034\uffef\035\uffef\001\002\000\032\002\ufff3\004\ufff3\007" +
    "\ufff3\010\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\031\ufff3" +
    "\033\ufff3\034\ufff3\035\ufff3\001\002\000\032\002\uffab\004" +
    "\uffab\007\uffab\010\uffab\015\uffab\016\uffab\017\uffab\020\uffab" +
    "\031\uffab\033\uffab\034\uffab\035\uffab\001\002\000\032\002" +
    "\uffed\004\uffed\007\uffed\010\uffed\015\uffed\016\uffed\017\uffed" +
    "\020\uffed\031\uffed\033\uffed\034\uffed\035\uffed\001\002\000" +
    "\032\002\ufff1\004\ufff1\007\ufff1\010\ufff1\015\ufff1\016\ufff1" +
    "\017\ufff1\020\ufff1\031\ufff1\033\ufff1\034\ufff1\035\ufff1\001" +
    "\002\000\032\002\uffeb\004\uffeb\007\uffeb\010\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\031\uffeb\033\uffeb\034\uffeb\035" +
    "\uffeb\001\002\000\010\005\uffb0\006\uffb0\012\uffb0\001\002" +
    "\000\006\011\uffd5\050\uffd5\001\002\000\006\011\uffd6\050" +
    "\uffd6\001\002\000\006\011\uffd4\050\uffd4\001\002\000\014" +
    "\011\077\043\070\044\063\045\064\047\065\001\002\000" +
    "\004\011\071\001\002\000\006\011\uffd7\050\uffd7\001\002" +
    "\000\004\050\072\001\002\000\006\012\074\030\073\001" +
    "\002\000\012\026\045\046\041\047\036\050\042\001\002" +
    "\000\032\002\uffe2\004\uffe2\007\uffe2\010\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\031\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\001\002\000\004\012\076\001\002\000\032\002\uffd9\004" +
    "\uffd9\007\uffd9\010\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\031\uffd9\033\uffd9\034\uffd9\035\uffd9\001\002\000\004\050" +
    "\123\001\002\000\006\011\101\050\102\001\002\000\010" +
    "\012\111\030\107\050\110\001\002\000\006\012\104\030" +
    "\103\001\002\000\012\026\045\046\041\047\036\050\042" +
    "\001\002\000\032\002\uffe4\004\uffe4\007\uffe4\010\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\031\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\001\002\000\004\012\106\001\002\000\032\002" +
    "\uffdb\004\uffdb\007\uffdb\010\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\020\uffdb\031\uffdb\033\uffdb\034\uffdb\035\uffdb\001\002\000" +
    "\012\026\045\046\041\047\036\050\042\001\002\000\046" +
    "\002\uffe6\004\uffe6\007\uffe6\010\uffe6\012\114\015\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\026\045\030\113\031\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\046\041\047\036\050\042\001\002\000" +
    "\032\002\uffe5\004\uffe5\007\uffe5\010\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\031\uffe5\033\uffe5\034\uffe5\035\uffe5\001" +
    "\002\000\004\012\120\001\002\000\014\012\116\026\045" +
    "\046\041\047\036\050\042\001\002\000\032\002\uffe7\004" +
    "\uffe7\007\uffe7\010\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\031\uffe7\033\uffe7\034\uffe7\035\uffe7\001\002\000\034\002" +
    "\uffdf\004\uffdf\007\uffdf\010\uffdf\012\117\015\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\031\uffdf\033\uffdf\034\uffdf\035\uffdf\001" +
    "\002\000\032\002\uffde\004\uffde\007\uffde\010\uffde\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\031\uffde\033\uffde\034\uffde\035" +
    "\uffde\001\002\000\032\002\uffe0\004\uffe0\007\uffe0\010\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\020\uffe0\031\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\001\002\000\032\002\uffdd\004\uffdd\007\uffdd" +
    "\010\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\031\uffdd\033" +
    "\uffdd\034\uffdd\035\uffdd\001\002\000\004\012\122\001\002" +
    "\000\032\002\uffdc\004\uffdc\007\uffdc\010\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\031\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\001\002\000\006\012\125\030\124\001\002\000\012\026" +
    "\045\046\041\047\036\050\042\001\002\000\032\002\uffe3" +
    "\004\uffe3\007\uffe3\010\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\031\uffe3\033\uffe3\034\uffe3\035\uffe3\001\002\000\004" +
    "\012\127\001\002\000\032\002\uffda\004\uffda\007\uffda\010" +
    "\uffda\015\uffda\016\uffda\017\uffda\020\uffda\031\uffda\033\uffda" +
    "\034\uffda\035\uffda\001\002\000\006\005\135\050\134\001" +
    "\002\000\004\005\132\001\002\000\004\012\133\001\002" +
    "\000\032\002\uffbf\004\uffbf\007\uffbf\010\uffbf\015\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\031\uffbf\033\uffbf\034\uffbf\035\uffbf" +
    "\001\002\000\006\005\140\012\137\001\002\000\004\012" +
    "\136\001\002\000\032\002\uffc0\004\uffc0\007\uffc0\010\uffc0" +
    "\015\uffc0\016\uffc0\017\uffc0\020\uffc0\031\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\001\002\000\032\002\uffc1\004\uffc1\007\uffc1" +
    "\010\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\031\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\001\002\000\034\002\uffc2\004\uffc2" +
    "\007\uffc2\010\uffc2\012\141\015\uffc2\016\uffc2\017\uffc2\020" +
    "\uffc2\031\uffc2\033\uffc2\034\uffc2\035\uffc2\001\002\000\032" +
    "\002\uffc3\004\uffc3\007\uffc3\010\uffc3\015\uffc3\016\uffc3\017" +
    "\uffc3\020\uffc3\031\uffc3\033\uffc3\034\uffc3\035\uffc3\001\002" +
    "\000\004\002\000\001\002\000\006\043\146\050\145\001" +
    "\002\000\004\005\201\001\002\000\004\030\173\001\002" +
    "\000\004\050\147\001\002\000\004\030\150\001\002\000" +
    "\004\047\151\001\002\000\004\012\152\001\002\000\014" +
    "\025\034\026\040\046\041\047\036\050\042\001\002\000" +
    "\004\012\154\001\002\000\010\037\155\040\156\050\160" +
    "\001\002\000\004\037\171\001\002\000\004\040\167\001" +
    "\002\000\004\005\uffa8\001\002\000\010\027\163\037\161" +
    "\040\162\001\002\000\004\037\166\001\002\000\004\040" +
    "\165\001\002\000\004\047\164\001\002\000\004\005\uffa6" +
    "\001\002\000\004\005\uffa3\001\002\000\004\005\uffa5\001" +
    "\002\000\004\050\170\001\002\000\004\005\uffa2\001\002" +
    "\000\004\050\172\001\002\000\004\005\uffa4\001\002\000" +
    "\004\047\174\001\002\000\004\012\175\001\002\000\014" +
    "\025\034\026\040\046\041\047\036\050\042\001\002\000" +
    "\004\012\177\001\002\000\010\037\155\040\156\050\160" +
    "\001\002\000\004\005\uffa7\001\002\000\004\006\202\001" +
    "\002\000\030\004\006\007\204\010\013\015\007\016\015" +
    "\017\005\020\024\031\004\033\027\034\020\035\025\001" +
    "\002\000\030\004\006\007\205\010\013\015\007\016\015" +
    "\017\005\020\024\031\004\033\027\034\020\035\025\001" +
    "\002\000\032\002\uffaa\004\uffaa\007\uffaa\010\uffaa\015\uffaa" +
    "\016\uffaa\017\uffaa\020\uffaa\031\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\001\002\000\032\002\uffa9\004\uffa9\007\uffa9\010\uffa9" +
    "\015\uffa9\016\uffa9\017\uffa9\020\uffa9\031\uffa9\033\uffa9\034" +
    "\uffa9\035\uffa9\001\002\000\032\002\ufff9\004\006\007\210" +
    "\010\013\015\007\016\015\017\005\020\024\031\004\033" +
    "\027\034\020\035\025\001\002\000\004\002\ufffd\001\002" +
    "\000\004\002\ufffa\001\002\000\006\005\216\050\215\001" +
    "\002\000\004\005\213\001\002\000\004\012\214\001\002" +
    "\000\032\002\uffc4\004\uffc4\007\uffc4\010\uffc4\015\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\031\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\001\002\000\006\005\221\012\220\001\002\000\004\012" +
    "\217\001\002\000\032\002\uffc5\004\uffc5\007\uffc5\010\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\020\uffc5\031\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\001\002\000\032\002\uffc6\004\uffc6\007\uffc6" +
    "\010\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\031\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\001\002\000\034\002\uffc7\004\uffc7" +
    "\007\uffc7\010\uffc7\012\222\015\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\031\uffc7\033\uffc7\034\uffc7\035\uffc7\001\002\000\032" +
    "\002\uffc8\004\uffc8\007\uffc8\010\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\031\uffc8\033\uffc8\034\uffc8\035\uffc8\001\002" +
    "\000\004\002\ufff8\001\002\000\004\011\225\001\002\000" +
    "\004\050\226\001\002\000\006\012\230\030\227\001\002" +
    "\000\012\026\045\046\041\047\036\050\042\001\002\000" +
    "\032\002\uffe1\004\uffe1\007\uffe1\010\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\031\uffe1\033\uffe1\034\uffe1\035\uffe1\001" +
    "\002\000\004\012\232\001\002\000\032\002\uffd8\004\uffd8" +
    "\007\uffd8\010\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\031" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\001\002\000\006\005\240" +
    "\050\237\001\002\000\004\005\235\001\002\000\004\012" +
    "\236\001\002\000\032\002\uffc9\004\uffc9\007\uffc9\010\uffc9" +
    "\015\uffc9\016\uffc9\017\uffc9\020\uffc9\031\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\001\002\000\006\005\243\012\242\001\002" +
    "\000\004\012\241\001\002\000\032\002\uffca\004\uffca\007" +
    "\uffca\010\uffca\015\uffca\016\uffca\017\uffca\020\uffca\031\uffca" +
    "\033\uffca\034\uffca\035\uffca\001\002\000\032\002\uffcb\004" +
    "\uffcb\007\uffcb\010\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb" +
    "\031\uffcb\033\uffcb\034\uffcb\035\uffcb\001\002\000\034\002" +
    "\uffcc\004\uffcc\007\uffcc\010\uffcc\012\244\015\uffcc\016\uffcc" +
    "\017\uffcc\020\uffcc\031\uffcc\033\uffcc\034\uffcc\035\uffcc\001" +
    "\002\000\032\002\uffcd\004\uffcd\007\uffcd\010\uffcd\015\uffcd" +
    "\016\uffcd\017\uffcd\020\uffcd\031\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\001\002\000\004\005\246\001\002\000\004\012\247" +
    "\001\002\000\032\002\uffce\004\uffce\007\uffce\010\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\031\uffce\033\uffce\034\uffce" +
    "\035\uffce\001\002\000\006\005\255\046\254\001\002\000" +
    "\004\005\252\001\002\000\004\012\253\001\002\000\032" +
    "\002\uffcf\004\uffcf\007\uffcf\010\uffcf\015\uffcf\016\uffcf\017" +
    "\uffcf\020\uffcf\031\uffcf\033\uffcf\034\uffcf\035\uffcf\001\002" +
    "\000\006\005\260\012\257\001\002\000\004\012\256\001" +
    "\002\000\032\002\uffd0\004\uffd0\007\uffd0\010\uffd0\015\uffd0" +
    "\016\uffd0\017\uffd0\020\uffd0\031\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\001\002\000\032\002\uffd1\004\uffd1\007\uffd1\010\uffd1" +
    "\015\uffd1\016\uffd1\017\uffd1\020\uffd1\031\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\001\002\000\034\002\uffd2\004\uffd2\007\uffd2" +
    "\010\uffd2\012\261\015\uffd2\016\uffd2\017\uffd2\020\uffd2\031" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\001\002\000\032\002\uffd3" +
    "\004\uffd3\007\uffd3\010\uffd3\015\uffd3\016\uffd3\017\uffd3\020" +
    "\uffd3\031\uffd3\033\uffd3\034\uffd3\035\uffd3\001\002\000\016" +
    "\005\272\025\034\026\040\046\041\047\036\050\042\001" +
    "\002\000\004\005\264\001\002\000\004\006\265\001\002" +
    "\000\030\004\006\007\267\010\013\015\007\016\015\017" +
    "\005\020\024\031\004\033\027\034\020\035\025\001\002" +
    "\000\030\004\006\007\270\010\013\015\007\016\015\017" +
    "\005\020\024\031\004\033\027\034\020\035\025\001\002" +
    "\000\032\002\uffba\004\uffba\007\uffba\010\uffba\015\uffba\016" +
    "\uffba\017\uffba\020\uffba\031\uffba\033\uffba\034\uffba\035\uffba" +
    "\001\002\000\032\002\uffb5\004\uffb5\007\uffb5\010\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\031\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\001\002\000\006\005\300\006\277\001\002\000" +
    "\004\006\273\001\002\000\030\004\006\007\275\010\013" +
    "\015\007\016\015\017\005\020\024\031\004\033\027\034" +
    "\020\035\025\001\002\000\030\004\006\007\276\010\013" +
    "\015\007\016\015\017\005\020\024\031\004\033\027\034" +
    "\020\035\025\001\002\000\032\002\uffbb\004\uffbb\007\uffbb" +
    "\010\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\031\uffbb\033" +
    "\uffbb\034\uffbb\035\uffbb\001\002\000\032\002\uffb6\004\uffb6" +
    "\007\uffb6\010\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\031" +
    "\uffb6\033\uffb6\034\uffb6\035\uffb6\001\002\000\030\004\006" +
    "\007\321\010\013\015\007\016\015\017\005\020\024\031" +
    "\004\033\027\034\020\035\025\001\002\000\032\004\006" +
    "\006\303\007\302\010\013\015\007\016\015\017\005\020" +
    "\024\031\004\033\027\034\020\035\025\001\002\000\030" +
    "\004\006\007\317\010\013\015\007\016\015\017\005\020" +
    "\024\031\004\033\027\034\020\035\025\001\002\000\032" +
    "\002\uffbd\004\uffbd\007\uffbd\010\uffbd\015\uffbd\016\uffbd\017" +
    "\uffbd\020\uffbd\031\uffbd\033\uffbd\034\uffbd\035\uffbd\001\002" +
    "\000\030\004\006\007\305\010\013\015\007\016\015\017" +
    "\005\020\024\031\004\033\027\034\020\035\025\001\002" +
    "\000\030\004\006\007\311\010\013\015\007\016\015\017" +
    "\005\020\024\031\004\033\027\034\020\035\025\001\002" +
    "\000\034\002\uffbe\004\uffbe\007\uffbe\010\uffbe\015\uffbe\016" +
    "\uffbe\017\uffbe\020\uffbe\031\uffbe\032\306\033\uffbe\034\uffbe" +
    "\035\uffbe\001\002\000\004\006\307\001\002\000\004\007" +
    "\310\001\002\000\032\002\uffaf\004\uffaf\007\uffaf\010\uffaf" +
    "\015\uffaf\016\uffaf\017\uffaf\020\uffaf\031\uffaf\033\uffaf\034" +
    "\uffaf\035\uffaf\001\002\000\034\002\uffb9\004\uffb9\007\uffb9" +
    "\010\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\031\uffb9\032" +
    "\312\033\uffb9\034\uffb9\035\uffb9\001\002\000\004\006\313" +
    "\001\002\000\030\004\006\007\315\010\013\015\007\016" +
    "\015\017\005\020\024\031\004\033\027\034\020\035\025" +
    "\001\002\000\030\004\006\007\316\010\013\015\007\016" +
    "\015\017\005\020\024\031\004\033\027\034\020\035\025" +
    "\001\002\000\032\002\uffae\004\uffae\007\uffae\010\uffae\015" +
    "\uffae\016\uffae\017\uffae\020\uffae\031\uffae\033\uffae\034\uffae" +
    "\035\uffae\001\002\000\032\002\uffad\004\uffad\007\uffad\010" +
    "\uffad\015\uffad\016\uffad\017\uffad\020\uffad\031\uffad\033\uffad" +
    "\034\uffad\035\uffad\001\002\000\032\002\uffb8\004\uffb8\007" +
    "\uffb8\010\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\031\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\001\002\000\030\004\006\007" +
    "\322\010\013\015\007\016\015\017\005\020\024\031\004" +
    "\033\027\034\020\035\025\001\002\000\032\002\uffbc\004" +
    "\uffbc\007\uffbc\010\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc" +
    "\031\uffbc\033\uffbc\034\uffbc\035\uffbc\001\002\000\032\002" +
    "\uffb7\004\uffb7\007\uffb7\010\uffb7\015\uffb7\016\uffb7\017\uffb7" +
    "\020\uffb7\031\uffb7\033\uffb7\034\uffb7\035\uffb7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\024\002\027\003\010\005\022\006\030\011" +
    "\021\012\011\013\025\016\013\017\007\001\001\000\006" +
    "\010\036\014\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\223\001\001\000\016\003" +
    "\054\005\057\006\056\011\053\012\060\013\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\010\005" +
    "\022\006\030\011\021\012\011\013\025\016\205\001\001" +
    "\000\002\001\001\000\022\003\010\005\022\006\030\011" +
    "\021\012\011\013\025\016\013\017\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\036\014\034\001\001\000\004\010\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\010\005\022" +
    "\006\030\011\021\012\011\013\025\016\050\001\001\000" +
    "\016\003\054\005\057\006\056\011\053\012\060\013\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\120\001\001" +
    "\000\004\010\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\036\014\152\001\001\000\002\001\001" +
    "\000\004\004\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\036\014\175\001\001" +
    "\000\002\001\001\000\004\004\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\010\005\022\006\030" +
    "\011\021\012\011\013\025\016\202\001\001\000\016\003" +
    "\054\005\057\006\056\011\053\012\060\013\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\054\005" +
    "\057\006\056\011\053\012\060\013\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\230\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\036\014\270\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\010\005\022\006" +
    "\030\011\021\012\011\013\025\016\265\001\001\000\016" +
    "\003\054\005\057\006\056\011\053\012\060\013\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\010\005\022\006\030\011" +
    "\021\012\011\013\025\016\273\001\001\000\016\003\054" +
    "\005\057\006\056\011\053\012\060\013\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\010\005\022" +
    "\006\030\011\021\012\011\013\025\016\317\001\001\000" +
    "\020\003\010\005\022\006\030\011\021\012\011\013\025" +
    "\016\300\001\001\000\016\003\054\005\057\006\056\011" +
    "\053\012\060\013\052\001\001\000\002\001\001\000\020" +
    "\003\010\005\022\006\030\011\021\012\011\013\025\016" +
    "\303\001\001\000\016\003\054\005\057\006\056\011\053" +
    "\012\060\013\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\010\005\022\006\030\011" +
    "\021\012\011\013\025\016\313\001\001\000\016\003\054" +
    "\005\057\006\056\011\053\012\060\013\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\054\005\057\006\056\011\053\012\060\013\052\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

  public void unrecovered_syntax_error(Symbol cur_token)
    {
        errores.add(new ErrorLexSint("Error sintáctico", s.right+1, "Sintaxis incorrecta, verificar la documentación del lenguaje BraillePrint"));
    }
    public ArrayList<ErrorLexSint> errores = Compilador.listaErrores;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Campotrabajo CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Campotrabajo 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(1,"","Error sintáctico", sright+1, sleft+1, "Creación de cuerpo de instrucción no definida"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= CUERPO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(2,"","Error sintáctico", sright+1, sleft+1, "Sección de inicialización incorrecta, palabra reservada camptrab no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= Llave_a 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(3,"","Error sintáctico", sright+1, sleft+1, "Llave de cierre no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(4,"","Error sintáctico", sright+1, sleft+1, "Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= Llave_a SENTENCIAS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(3,"","Error sintáctico", sright+1, sleft+1, "Llave de cierre no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO ::= SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(4,"","Error sintáctico", sright+1, sleft+1, "Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VALOR ::= Num_Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VALOR ::= Texto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VALOR ::= Op_Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VALOR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIAS ::= SENTENCIAS DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIAS ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIAS ::= SENTENCIAS SI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS ::= SI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIAS ::= SENTENCIAS ALTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIAS ::= ALTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAS ::= SENTENCIAS FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAS ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIAS ::= SENTENCIAS CICLOMIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIAS ::= CICLOMIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIAS ::= SENTENCIAS CICLOFOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIAS ::= CICLOFOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Declarar Corchete_a TDATO Corchete_c Identificador Punto_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Declarar Corchete_a TDATO Corchete_c Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(5,"","Error sintáctico", sright+1, sleft+1, "Finalizacion de sentencia incorrecta, ';' no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Declarar Corchete_a TDATO Corchete_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(13,"","Error sintáctico", sright+1, sleft+1, "Declaración incorrecta, identificador no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Declarar Corchete_a TDATO Identificador Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(9,"","Error sintáctico", sright+1, sleft+1, "Declaración incorrecta, corchete de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Declarar Corchete_a Corchete_c Identificador Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(11,"","Error sintáctico", sright+1, sleft+1, "Declaración incorrecta, tipo de dato no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Declarar TDATO Corchete_c Identificador Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(10,"","Error sintáctico", sright+1, sleft+1, "Declaración incorrecta, corchete de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Corchete_a TDATO Corchete_c Identificador Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(12,"","Error sintáctico", sright+1, sleft+1, "Declaración incorrecta, palabra reservada 'declarar' no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Declarar Corchete_a TDATO Corchete_c Identificador Asignacion VALOR Punto_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Declarar Corchete_a TDATO Corchete_c Identificador Asignacion VALOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(5,"","Error sintáctico", sright+1, sleft+1, "Finalizacion de sentencia incorrecta, ';' no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Declarar Corchete_a TDATO Corchete_c Identificador Asignacion Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(6,"","Error sintáctico", sright+1, sleft+1, "Asignación incorrecta, valor no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Declarar Corchete_a TDATO Corchete_c Identificador VALOR Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(7,"","Error sintáctico", sright+1, sleft+1, "Asignación incorrecta, operador de asignación no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Declarar Corchete_a TDATO Corchete_c Asignacion VALOR Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(8,"","Error sintáctico", sright+1, sleft+1, "Asignación incorrecta, identificador no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Declarar Corchete_a TDATO Identificador Asignacion VALOR Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(9,"","Error sintáctico", sright+1, sleft+1, "Declaración incorrecta, corchete de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Declarar Corchete_a Corchete_c Identificador Asignacion VALOR Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(11,"","Error sintáctico", sright+1, sleft+1, "Declaración incorrecta, tipo de dato no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Declarar TDATO Corchete_c Identificador Asignacion VALOR Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(10,"","Error sintáctico", sright+1, sleft+1, "Declaración incorrecta, corchete de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Corchete_a TDATO Corchete_c Identificador Asignacion VALOR Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(12,"","Error sintáctico", sright+1, sleft+1, "Declaración incorrecta, palabra reservada 'declarar' no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TDATO ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TDATO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TDATO ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TDATO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TDATO ::= VarCar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TDATO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TDATO ::= Num_Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TDATO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNCION ::= func_ValCad Parentesis_a Texto Parentesis_c Punto_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNCION ::= func_ValCad Parentesis_a Texto Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(5,"","Error sintáctico", sright+1, sleft+1, "Finalizacion de sentencia incorrecta, ';' no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FUNCION ::= func_ValCad Parentesis_a Texto Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(16,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FUNCION ::= func_ValCad Parentesis_a Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(14,"","Error sintáctico", sright+1, sleft+1, "Parámetro inválido o no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FUNCION ::= func_ValCad Texto Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(17,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FUNCION ::= Parentesis_a Texto Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(15,"","Error sintáctico", sright+1, sleft+1, "Formato inválido de posible función, nombre incorrecto o no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FUNCION ::= func_Ver Parentesis_a Identificador Parentesis_c Punto_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FUNCION ::= func_Ver Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(5,"","Error sintáctico", sright+1, sleft+1, "Finalizacion de sentencia incorrecta, ';' no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FUNCION ::= func_Ver Parentesis_a Identificador Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(16,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FUNCION ::= func_Ver Parentesis_a Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(14,"","Error sintáctico", sright+1, sleft+1, "Parámetro inválido o no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FUNCION ::= func_Ver Identificador Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(17,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FUNCION ::= func_ContCarac Parentesis_a Identificador Parentesis_c Punto_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FUNCION ::= func_ContCarac Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(5,"","Error sintáctico", sright+1, sleft+1, "Finalizacion de sentencia incorrecta, ';' no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FUNCION ::= func_ContCarac Parentesis_a Identificador Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(16,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FUNCION ::= func_ContCarac Parentesis_a Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(14,"","Error sintáctico", sright+1, sleft+1, "Parámetro inválido o no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNCION ::= func_ContCarac Identificador Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(17,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNCION ::= func_Imprimir Parentesis_a Identificador Parentesis_c Punto_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNCION ::= func_Imprimir Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(5,"","Error sintáctico", sright+1, sleft+1, "Finalizacion de sentencia incorrecta, ';' no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUNCION ::= func_Imprimir Parentesis_a Identificador Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(16,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNCION ::= func_Imprimir Parentesis_a Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(14,"","Error sintáctico", sright+1, sleft+1, "Parámetro inválido o no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNCION ::= func_Imprimir Identificador Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(17,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SI ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SI ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(4,"","Error sintáctico", sright+1, sleft+1, "Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SI ::= Si Parentesis_a SENTENCIA_BOOLEANA Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(16,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SI ::= Si Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(18,"","Error sintáctico", sright+1, sleft+1, "Sentencia/parámetro inválidos o no encontrados"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SI ::= Si SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(17,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SI ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SI ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(4,"","Error sintáctico", sright+1, sleft+1, "Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SI ::= Si Parentesis_a SENTENCIA_BOOLEANA Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(16,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SI ::= Si Parentesis_a Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(18,"","Error sintáctico", sright+1, sleft+1, "Sentencia/parámetro inválidos o no encontrados"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SI ::= Si SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(17,"","Error sintáctico", sright+1, sleft+1, "Paréntesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_BOOLEANA ::= Op_Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA_BOOLEANA ::= VALOR Op_Relacional VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA_BOOLEANA ::= VALOR Op_Relacional 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(19,"","Error sintáctico", sright+1, sleft+1, "Valor no encontrado, posibles esperados: Op_Booleano, identificador, Num_Entero, Texto"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA_BOOLEANA ::= VALOR VALOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(20,"","Error sintáctico", sright+1, sleft+1, "Operador relacional inválido o no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA_BOOLEANA ::= Op_Relacional VALOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(19,"","Error sintáctico", sright+1, sleft+1, "Valor no encontrado, posibles esperados: Op_Booleano, identificador, Num_Entero, Texto"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c Alter Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c Alter Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c Alter Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CICLOMIENTRAS ::= CicloMientras Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CICLOMIENTRAS ::= CicloMientras Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CICLOFOR ::= CicloFor Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CICLOFOR ::= CicloFor Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENTENCIA_FOR ::= Entero Identificador Asignacion Num_Entero Punto_Coma SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIA_FOR ::= Identificador Asignacion Num_Entero Punto_Coma SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLARACION_FOR ::= Identificador Op_Atribucion Num_Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLARACION_FOR ::= Identificador Adicion Adicion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECLARACION_FOR ::= Adicion Adicion Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECLARACION_FOR ::= Identificador Sustraccion Sustraccion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DECLARACION_FOR ::= Sustraccion Sustraccion Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
