
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package Ventanas;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\266\000\002\002\004\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\002\003\000\002\002\004" +
    "\000\002\002\004\000\002\002\003\000\002\002\003\000" +
    "\002\017\004\000\002\017\003\000\002\017\004\000\002" +
    "\017\004\000\002\017\003\000\002\017\005\000\002\017" +
    "\004\000\002\017\004\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\016\004\000" +
    "\002\016\003\000\002\016\004\000\002\016\003\000\002" +
    "\016\004\000\002\016\003\000\002\016\004\000\002\016" +
    "\003\000\002\016\004\000\002\016\003\000\002\016\004" +
    "\000\002\016\003\000\002\016\003\000\002\003\012\000" +
    "\002\003\012\000\002\003\012\000\002\003\011\000\002" +
    "\003\011\000\002\003\011\000\002\003\011\000\002\003" +
    "\011\000\002\003\011\000\002\003\011\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\006\007\000\002\006\006\000\002\006\006\000\002" +
    "\006\006\000\002\006\006\000\002\006\007\000\002\006" +
    "\007\000\002\006\007\000\002\006\006\000\002\006\006" +
    "\000\002\006\006\000\002\006\006\000\002\006\007\000" +
    "\002\006\006\000\002\006\006\000\002\006\006\000\002" +
    "\006\006\000\002\006\007\000\002\006\006\000\002\006" +
    "\006\000\002\006\006\000\002\006\006\000\002\005\010" +
    "\000\002\005\007\000\002\005\007\000\002\005\007\000" +
    "\002\005\007\000\002\005\011\000\002\005\010\000\002" +
    "\005\010\000\002\005\010\000\002\005\010\000\002\014" +
    "\003\000\002\014\005\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\011\013\000\002\011\013\000" +
    "\002\011\012\000\002\011\012\000\002\011\012\000\002" +
    "\011\012\000\002\011\012\000\002\011\012\000\002\011" +
    "\013\000\002\011\013\000\002\011\013\000\002\011\013" +
    "\000\002\011\013\000\002\011\013\000\002\011\015\000" +
    "\002\011\014\000\002\011\014\000\002\011\014\000\002" +
    "\011\014\000\002\011\014\000\002\011\014\000\002\011" +
    "\014\000\002\011\014\000\002\012\010\000\002\012\007" +
    "\000\002\012\007\000\002\012\007\000\002\012\007\000" +
    "\002\012\011\000\002\012\010\000\002\012\010\000\002" +
    "\012\010\000\002\012\010\000\002\013\007\000\002\013" +
    "\007\000\002\013\007\000\002\013\007\000\002\013\011" +
    "\000\002\013\010\000\002\013\010\000\002\013\010\000" +
    "\002\013\010\000\002\013\010\000\002\015\012\000\002" +
    "\015\011\000\002\015\011\000\002\015\011\000\002\015" +
    "\011\000\002\015\011\000\002\015\011\000\002\015\011" +
    "\000\002\015\010\000\002\015\010\000\002\015\010\000" +
    "\002\015\010\000\002\015\010\000\002\015\010\000\002" +
    "\004\005\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\005\000\002\004\004\000\002\004\004" +
    "\000\002\004\005\000\002\004\004\000\002\004\005\000" +
    "\002\004\004\000\002\004\004\000\002\004\005\000\002" +
    "\004\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017c\000\066\003\032\004\031\005\030\006\011\007" +
    "\007\010\023\011\021\012\036\013\006\014\047\015\041" +
    "\016\033\017\027\020\017\030\020\031\040\033\025\034" +
    "\010\035\043\036\024\037\013\040\046\041\004\042\035" +
    "\047\044\050\037\001\002\000\004\007\ufff5\001\002\000" +
    "\004\007\u017e\001\002\000\004\007\ufffa\001\002\000\006" +
    "\002\uffda\007\ufffe\001\002\000\012\004\u011d\030\u011e\043" +
    "\u0120\050\u011f\001\002\000\066\002\uffdd\003\032\004\u010a" +
    "\005\u0109\006\u0116\007\u0115\010\u0111\011\u010f\012\u010c\013" +
    "\u0117\014\u0114\015\041\016\033\017\027\020\017\030\u0119" +
    "\031\040\033\025\034\010\035\043\037\u0118\040\u010b\041" +
    "\u010e\042\u011a\047\u010d\050\u0113\001\002\000\030\002\uffcf" +
    "\007\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\031\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\050\uffcf\001\002\000\004\007\ufff7" +
    "\001\002\000\030\002\uffcb\007\uffcb\015\uffcb\016\uffcb\017" +
    "\uffcb\020\uffcb\031\uffcb\033\uffcb\034\uffcb\035\uffcb\050\uffcb" +
    "\001\002\000\026\007\u0108\015\041\016\033\017\027\020" +
    "\017\031\040\033\025\034\010\035\043\050\150\001\002" +
    "\000\004\002\uffdf\001\002\000\006\004\376\050\377\001" +
    "\002\000\004\007\ufff8\001\002\000\004\007\ufffc\001\002" +
    "\000\030\002\uffcd\007\uffcd\015\uffcd\016\uffcd\017\uffcd\020" +
    "\uffcd\031\uffcd\033\uffcd\034\uffcd\035\uffcd\050\uffcd\001\002" +
    "\000\004\007\ufffd\001\002\000\066\002\uffe0\003\032\004" +
    "\031\005\030\006\011\007\007\010\023\011\021\012\036" +
    "\013\006\014\047\015\041\016\033\017\027\020\017\030" +
    "\020\031\040\033\025\034\010\035\043\037\013\040\046" +
    "\041\004\042\035\047\044\050\150\001\002\000\016\004" +
    "\344\025\135\026\141\046\064\047\062\050\066\001\002" +
    "\000\030\002\uffc9\007\uffc9\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\031\uffc9\033\uffc9\034\uffc9\035\uffc9\050\uffc9\001\002" +
    "\000\006\004\332\046\333\001\002\000\004\007\uffff\001" +
    "\002\000\004\007\000\001\002\000\030\002\uffc6\007\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\020\uffc6\031\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\050\uffc6\001\002\000\006\004\320\050\321" +
    "\001\002\000\030\002\uffd1\007\uffd1\015\uffd1\016\uffd1\017" +
    "\uffd1\020\uffd1\031\uffd1\033\uffd1\034\uffd1\035\uffd1\050\uffd1" +
    "\001\002\000\004\007\ufff4\001\002\000\004\007\ufffb\001" +
    "\002\000\066\002\uffe3\003\032\004\315\005\030\006\011" +
    "\007\007\010\317\011\021\012\036\013\006\014\047\015" +
    "\041\016\033\017\027\020\017\030\020\031\040\033\025" +
    "\034\010\035\043\037\013\040\046\041\004\042\035\047" +
    "\044\050\150\001\002\000\016\004\136\025\135\026\141" +
    "\046\064\047\062\050\066\001\002\000\006\004\123\050" +
    "\124\001\002\000\030\002\uffc7\007\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\031\uffc7\033\uffc7\034\uffc7\035\uffc7\050" +
    "\uffc7\001\002\000\014\010\054\043\056\044\051\045\052" +
    "\047\053\001\002\000\004\007\ufff3\001\002\000\004\002" +
    "\050\001\002\000\004\007\ufff6\001\002\000\004\007\ufff9" +
    "\001\002\000\004\002\001\001\002\000\006\011\uffb9\050" +
    "\uffb9\001\002\000\006\011\uffba\050\uffba\001\002\000\006" +
    "\011\uffb8\050\uffb8\001\002\000\016\011\070\043\056\044" +
    "\051\045\052\047\053\050\072\001\002\000\004\011\057" +
    "\001\002\000\006\011\uffbb\050\uffbb\001\002\000\004\050" +
    "\060\001\002\000\004\030\061\001\002\000\012\026\065" +
    "\046\064\047\062\050\066\001\002\000\046\002\uffd6\005" +
    "\uffd6\006\uffd6\007\uffd6\012\uffd6\015\uffd6\016\uffd6\017\uffd6" +
    "\020\uffd6\025\uffd6\026\uffd6\031\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\001\002\000\004\012\067" +
    "\001\002\000\046\002\uffd5\005\uffd5\006\uffd5\007\uffd5\012" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\025\uffd5\026\uffd5" +
    "\031\uffd5\033\uffd5\034\uffd5\035\uffd5\046\uffd5\047\uffd5\050" +
    "\uffd5\001\002\000\036\002\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\012\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\031\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\050\uffd4\001\002\000\046\002\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\012\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\020\uffd3\025\uffd3\026\uffd3\031\uffd3\033\uffd3\034\uffd3" +
    "\035\uffd3\046\uffd3\047\uffd3\050\uffd3\001\002\000\030\002" +
    "\uffbc\007\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\031\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\050\uffbc\001\002\000\004\050" +
    "\117\001\002\000\006\011\100\050\101\001\002\000\004" +
    "\011\073\001\002\000\004\050\074\001\002\000\004\030" +
    "\075\001\002\000\012\026\065\046\064\047\062\050\066" +
    "\001\002\000\004\012\077\001\002\000\030\002\uffc3\007" +
    "\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\031\uffc3\033\uffc3" +
    "\034\uffc3\035\uffc3\050\uffc3\001\002\000\006\030\105\050" +
    "\106\001\002\000\004\030\102\001\002\000\012\026\065" +
    "\046\064\047\062\050\066\001\002\000\004\012\104\001" +
    "\002\000\030\002\uffbe\007\uffbe\015\uffbe\016\uffbe\017\uffbe" +
    "\020\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe\050\uffbe\001" +
    "\002\000\012\026\065\046\064\047\062\050\066\001\002" +
    "\000\014\026\065\030\110\046\064\047\062\050\066\001" +
    "\002\000\004\012\114\001\002\000\014\012\112\026\065" +
    "\046\064\047\062\050\066\001\002\000\032\002\uffc2\007" +
    "\uffc2\012\113\015\uffc2\016\uffc2\017\uffc2\020\uffc2\031\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\050\uffc2\001\002\000\030\002" +
    "\uffc1\007\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\031\uffc1" +
    "\033\uffc1\034\uffc1\035\uffc1\050\uffc1\001\002\000\030\002" +
    "\uffc5\007\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\031\uffc5" +
    "\033\uffc5\034\uffc5\035\uffc5\050\uffc5\001\002\000\030\002" +
    "\uffc0\007\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\031\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\050\uffc0\001\002\000\004\012" +
    "\116\001\002\000\030\002\uffbf\007\uffbf\015\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\031\uffbf\033\uffbf\034\uffbf\035\uffbf\050" +
    "\uffbf\001\002\000\004\030\120\001\002\000\012\026\065" +
    "\046\064\047\062\050\066\001\002\000\004\012\122\001" +
    "\002\000\030\002\uffbd\007\uffbd\015\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\031\uffbd\033\uffbd\034\uffbd\035\uffbd\050\uffbd\001" +
    "\002\000\006\005\130\050\127\001\002\000\004\005\125" +
    "\001\002\000\004\012\126\001\002\000\030\002\uffac\007" +
    "\uffac\015\uffac\016\uffac\017\uffac\020\uffac\031\uffac\033\uffac" +
    "\034\uffac\035\uffac\050\uffac\001\002\000\006\005\133\012" +
    "\132\001\002\000\004\012\131\001\002\000\030\002\uffad" +
    "\007\uffad\015\uffad\016\uffad\017\uffad\020\uffad\031\uffad\033" +
    "\uffad\034\uffad\035\uffad\050\uffad\001\002\000\030\002\uffae" +
    "\007\uffae\015\uffae\016\uffae\017\uffae\020\uffae\031\uffae\033" +
    "\uffae\034\uffae\035\uffae\050\uffae\001\002\000\032\002\uffaf" +
    "\007\uffaf\012\134\015\uffaf\016\uffaf\017\uffaf\020\uffaf\031" +
    "\uffaf\033\uffaf\034\uffaf\035\uffaf\050\uffaf\001\002\000\030" +
    "\002\uffb0\007\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\031" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\050\uffb0\001\002\000\012" +
    "\026\065\046\064\047\062\050\066\001\002\000\016\005" +
    "\214\025\135\026\141\046\064\047\062\050\066\001\002" +
    "\000\004\005\145\001\002\000\014\025\142\026\065\046" +
    "\064\047\062\050\066\001\002\000\022\005\uff97\006\uff97" +
    "\012\uff97\025\uffd4\026\uffd4\046\uffd4\047\uffd4\050\uffd4\001" +
    "\002\000\020\005\uff95\006\uff95\012\uff95\026\065\046\064" +
    "\047\062\050\066\001\002\000\010\005\uff94\006\uff94\012" +
    "\uff94\001\002\000\010\005\uff96\006\uff96\012\uff96\001\002" +
    "\000\004\006\146\001\002\000\030\003\032\007\151\015" +
    "\041\016\033\017\027\020\017\031\040\033\025\034\010" +
    "\035\043\050\150\001\002\000\026\007\202\015\041\016" +
    "\033\017\027\020\017\031\040\033\025\034\010\035\043" +
    "\050\150\001\002\000\006\004\155\010\156\001\002\000" +
    "\032\002\uff9d\007\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d" +
    "\031\uff9d\032\152\033\uff9d\034\uff9d\035\uff9d\050\uff9d\001" +
    "\002\000\004\006\153\001\002\000\004\007\154\001\002" +
    "\000\030\002\uff8b\007\uff8b\015\uff8b\016\uff8b\017\uff8b\020" +
    "\uff8b\031\uff8b\033\uff8b\034\uff8b\035\uff8b\050\uff8b\001\002" +
    "\000\014\025\135\026\141\046\166\047\062\050\167\001" +
    "\002\000\012\043\056\044\051\045\052\047\053\001\002" +
    "\000\004\011\160\001\002\000\004\050\161\001\002\000" +
    "\004\030\162\001\002\000\012\026\065\046\064\047\062" +
    "\050\066\001\002\000\004\012\164\001\002\000\030\002" +
    "\uffc4\007\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\031\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\050\uffc4\001\002\000\004\005" +
    "\174\001\002\000\016\005\172\025\uffd5\026\uffd5\046\uffd5" +
    "\047\uffd5\050\uffd5\001\002\000\016\005\170\025\uffd3\026" +
    "\uffd3\046\uffd3\047\uffd3\050\uffd3\001\002\000\004\012\171" +
    "\001\002\000\030\002\uffb1\007\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\031\uffb1\033\uffb1\034\uffb1\035\uffb1\050\uffb1" +
    "\001\002\000\004\012\173\001\002\000\030\002\uffb2\007" +
    "\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\031\uffb2\033\uffb2" +
    "\034\uffb2\035\uffb2\050\uffb2\001\002\000\004\006\175\001" +
    "\002\000\004\007\176\001\002\000\030\002\uffa1\007\uffa1" +
    "\015\uffa1\016\uffa1\017\uffa1\020\uffa1\031\uffa1\033\uffa1\034" +
    "\uffa1\035\uffa1\050\uffa1\001\002\000\030\002\uffc8\007\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\020\uffc8\031\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\050\uffc8\001\002\000\030\002\uffce\007\uffce" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\031\uffce\033\uffce\034" +
    "\uffce\035\uffce\050\uffce\001\002\000\030\002\uffd2\007\uffd2" +
    "\015\uffd2\016\uffd2\017\uffd2\020\uffd2\031\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\050\uffd2\001\002\000\032\002\uff98\007\uff98" +
    "\015\uff98\016\uff98\017\uff98\020\uff98\031\uff98\032\206\033" +
    "\uff98\034\uff98\035\uff98\050\uff98\001\002\000\030\002\uffcc" +
    "\007\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\031\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\050\uffcc\001\002\000\030\002\uffd0" +
    "\007\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\031\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\050\uffd0\001\002\000\030\002\uffca" +
    "\007\uffca\015\uffca\016\uffca\017\uffca\020\uffca\031\uffca\033" +
    "\uffca\034\uffca\035\uffca\050\uffca\001\002\000\004\006\207" +
    "\001\002\000\030\003\032\007\211\015\041\016\033\017" +
    "\027\020\017\031\040\033\025\034\010\035\043\050\150" +
    "\001\002\000\026\007\212\015\041\016\033\017\027\020" +
    "\017\031\040\033\025\034\010\035\043\050\150\001\002" +
    "\000\030\002\uff85\007\uff85\015\uff85\016\uff85\017\uff85\020" +
    "\uff85\031\uff85\033\uff85\034\uff85\035\uff85\050\uff85\001\002" +
    "\000\030\002\uff7c\007\uff7c\015\uff7c\016\uff7c\017\uff7c\020" +
    "\uff7c\031\uff7c\033\uff7c\034\uff7c\035\uff7c\050\uff7c\001\002" +
    "\000\006\005\232\006\231\001\002\000\004\006\215\001" +
    "\002\000\030\003\032\007\217\015\041\016\033\017\027" +
    "\020\017\031\040\033\025\034\010\035\043\050\150\001" +
    "\002\000\026\007\223\015\041\016\033\017\027\020\017" +
    "\031\040\033\025\034\010\035\043\050\150\001\002\000" +
    "\032\002\uff9e\007\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e" +
    "\031\uff9e\032\220\033\uff9e\034\uff9e\035\uff9e\050\uff9e\001" +
    "\002\000\004\006\221\001\002\000\004\007\222\001\002" +
    "\000\030\002\uff8c\007\uff8c\015\uff8c\016\uff8c\017\uff8c\020" +
    "\uff8c\031\uff8c\033\uff8c\034\uff8c\035\uff8c\050\uff8c\001\002" +
    "\000\032\002\uff99\007\uff99\015\uff99\016\uff99\017\uff99\020" +
    "\uff99\031\uff99\032\224\033\uff99\034\uff99\035\uff99\050\uff99" +
    "\001\002\000\004\006\225\001\002\000\030\003\032\007" +
    "\227\015\041\016\033\017\027\020\017\031\040\033\025" +
    "\034\010\035\043\050\150\001\002\000\026\007\230\015" +
    "\041\016\033\017\027\020\017\031\040\033\025\034\010" +
    "\035\043\050\150\001\002\000\030\002\uff86\007\uff86\015" +
    "\uff86\016\uff86\017\uff86\020\uff86\031\uff86\033\uff86\034\uff86" +
    "\035\uff86\050\uff86\001\002\000\030\002\uff7d\007\uff7d\015" +
    "\uff7d\016\uff7d\017\uff7d\020\uff7d\031\uff7d\033\uff7d\034\uff7d" +
    "\035\uff7d\050\uff7d\001\002\000\030\003\032\007\302\015" +
    "\041\016\033\017\027\020\017\031\040\033\025\034\010" +
    "\035\043\050\150\001\002\000\032\003\032\006\235\007" +
    "\234\015\041\016\033\017\027\020\017\031\040\033\025" +
    "\034\010\035\043\050\150\001\002\000\026\007\273\015" +
    "\041\016\033\017\027\020\017\031\040\033\025\034\010" +
    "\035\043\050\150\001\002\000\030\002\uffa0\007\uffa0\015" +
    "\uffa0\016\uffa0\017\uffa0\020\uffa0\031\uffa0\033\uffa0\034\uffa0" +
    "\035\uffa0\050\uffa0\001\002\000\032\003\032\007\240\015" +
    "\041\016\033\017\027\020\017\031\040\032\237\033\025" +
    "\034\010\035\043\050\150\001\002\000\026\007\256\015" +
    "\041\016\033\017\027\020\017\031\040\033\025\034\010" +
    "\035\043\050\150\001\002\000\004\006\254\001\002\000" +
    "\010\006\241\032\242\050\243\001\002\000\004\007\253" +
    "\001\002\000\006\006\247\007\246\001\002\000\004\006" +
    "\244\001\002\000\004\007\245\001\002\000\030\002\uff92" +
    "\007\uff92\015\uff92\016\uff92\017\uff92\020\uff92\031\uff92\033" +
    "\uff92\034\uff92\035\uff92\050\uff92\001\002\000\030\002\uff90" +
    "\007\uff90\015\uff90\016\uff90\017\uff90\020\uff90\031\uff90\033" +
    "\uff90\034\uff90\035\uff90\050\uff90\001\002\000\030\003\032" +
    "\007\251\015\041\016\033\017\027\020\017\031\040\033" +
    "\025\034\010\035\043\050\150\001\002\000\026\007\252" +
    "\015\041\016\033\017\027\020\017\031\040\033\025\034" +
    "\010\035\043\050\150\001\002\000\030\002\uff91\007\uff91" +
    "\015\uff91\016\uff91\017\uff91\020\uff91\031\uff91\033\uff91\034" +
    "\uff91\035\uff91\050\uff91\001\002\000\030\002\uff80\007\uff80" +
    "\015\uff80\016\uff80\017\uff80\020\uff80\031\uff80\033\uff80\034" +
    "\uff80\035\uff80\050\uff80\001\002\000\030\002\uff8f\007\uff8f" +
    "\015\uff8f\016\uff8f\017\uff8f\020\uff8f\031\uff8f\033\uff8f\034" +
    "\uff8f\035\uff8f\050\uff8f\001\002\000\004\007\255\001\002" +
    "\000\030\002\uff8e\007\uff8e\015\uff8e\016\uff8e\017\uff8e\020" +
    "\uff8e\031\uff8e\033\uff8e\034\uff8e\035\uff8e\050\uff8e\001\002" +
    "\000\034\002\uff9c\006\257\007\uff9c\015\uff9c\016\uff9c\017" +
    "\uff9c\020\uff9c\031\uff9c\032\260\033\uff9c\034\uff9c\035\uff9c" +
    "\050\uff9c\001\002\000\030\003\032\007\271\015\041\016" +
    "\033\017\027\020\017\031\040\033\025\034\010\035\043" +
    "\050\150\001\002\000\032\003\032\006\263\007\262\015" +
    "\041\016\033\017\027\020\017\031\040\033\025\034\010" +
    "\035\043\050\150\001\002\000\026\007\267\015\041\016" +
    "\033\017\027\020\017\031\040\033\025\034\010\035\043" +
    "\050\150\001\002\000\030\002\uff8a\007\uff8a\015\uff8a\016" +
    "\uff8a\017\uff8a\020\uff8a\031\uff8a\033\uff8a\034\uff8a\035\uff8a" +
    "\050\uff8a\001\002\000\030\003\032\007\265\015\041\016" +
    "\033\017\027\020\017\031\040\033\025\034\010\035\043" +
    "\050\150\001\002\000\026\007\266\015\041\016\033\017" +
    "\027\020\017\031\040\033\025\034\010\035\043\050\150" +
    "\001\002\000\030\002\uff83\007\uff83\015\uff83\016\uff83\017" +
    "\uff83\020\uff83\031\uff83\033\uff83\034\uff83\035\uff83\050\uff83" +
    "\001\002\000\030\002\uff84\007\uff84\015\uff84\016\uff84\017" +
    "\uff84\020\uff84\031\uff84\033\uff84\034\uff84\035\uff84\050\uff84" +
    "\001\002\000\030\002\uff82\007\uff82\015\uff82\016\uff82\017" +
    "\uff82\020\uff82\031\uff82\033\uff82\034\uff82\035\uff82\050\uff82" +
    "\001\002\000\026\007\272\015\041\016\033\017\027\020" +
    "\017\031\040\033\025\034\010\035\043\050\150\001\002" +
    "\000\030\002\uff89\007\uff89\015\uff89\016\uff89\017\uff89\020" +
    "\uff89\031\uff89\033\uff89\034\uff89\035\uff89\050\uff89\001\002" +
    "\000\030\002\uff81\007\uff81\015\uff81\016\uff81\017\uff81\020" +
    "\uff81\031\uff81\033\uff81\034\uff81\035\uff81\050\uff81\001\002" +
    "\000\032\002\uff9b\007\uff9b\015\uff9b\016\uff9b\017\uff9b\020" +
    "\uff9b\031\uff9b\032\274\033\uff9b\034\uff9b\035\uff9b\050\uff9b" +
    "\001\002\000\004\006\275\001\002\000\030\003\032\007" +
    "\277\015\041\016\033\017\027\020\017\031\040\033\025" +
    "\034\010\035\043\050\150\001\002\000\026\007\300\015" +
    "\041\016\033\017\027\020\017\031\040\033\025\034\010" +
    "\035\043\050\150\001\002\000\030\002\uff88\007\uff88\015" +
    "\uff88\016\uff88\017\uff88\020\uff88\031\uff88\033\uff88\034\uff88" +
    "\035\uff88\050\uff88\001\002\000\030\002\uff7f\007\uff7f\015" +
    "\uff7f\016\uff7f\017\uff7f\020\uff7f\031\uff7f\033\uff7f\034\uff7f" +
    "\035\uff7f\050\uff7f\001\002\000\026\007\306\015\041\016" +
    "\033\017\027\020\017\031\040\033\025\034\010\035\043" +
    "\050\150\001\002\000\032\002\uff9f\007\uff9f\015\uff9f\016" +
    "\uff9f\017\uff9f\020\uff9f\031\uff9f\032\303\033\uff9f\034\uff9f" +
    "\035\uff9f\050\uff9f\001\002\000\004\006\304\001\002\000" +
    "\004\007\305\001\002\000\030\002\uff8d\007\uff8d\015\uff8d" +
    "\016\uff8d\017\uff8d\020\uff8d\031\uff8d\033\uff8d\034\uff8d\035" +
    "\uff8d\050\uff8d\001\002\000\032\002\uff9a\007\uff9a\015\uff9a" +
    "\016\uff9a\017\uff9a\020\uff9a\031\uff9a\032\307\033\uff9a\034" +
    "\uff9a\035\uff9a\050\uff9a\001\002\000\004\006\310\001\002" +
    "\000\030\003\032\007\312\015\041\016\033\017\027\020" +
    "\017\031\040\033\025\034\010\035\043\050\150\001\002" +
    "\000\026\007\313\015\041\016\033\017\027\020\017\031" +
    "\040\033\025\034\010\035\043\050\150\001\002\000\030" +
    "\002\uff87\007\uff87\015\uff87\016\uff87\017\uff87\020\uff87\031" +
    "\uff87\033\uff87\034\uff87\035\uff87\050\uff87\001\002\000\030" +
    "\002\uff7e\007\uff7e\015\uff7e\016\uff7e\017\uff7e\020\uff7e\031" +
    "\uff7e\033\uff7e\034\uff7e\035\uff7e\050\uff7e\001\002\000\010" +
    "\005\uff93\006\uff93\012\uff93\001\002\000\016\007\000\025" +
    "\135\026\141\046\166\047\062\050\167\001\002\000\004" +
    "\002\uffe2\001\002\000\014\007\ufffd\043\056\044\051\045" +
    "\052\047\053\001\002\000\006\005\325\050\324\001\002" +
    "\000\004\005\322\001\002\000\004\012\323\001\002\000" +
    "\030\002\uffa7\007\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7" +
    "\031\uffa7\033\uffa7\034\uffa7\035\uffa7\050\uffa7\001\002\000" +
    "\006\005\330\012\327\001\002\000\004\012\326\001\002" +
    "\000\030\002\uffa8\007\uffa8\015\uffa8\016\uffa8\017\uffa8\020" +
    "\uffa8\031\uffa8\033\uffa8\034\uffa8\035\uffa8\050\uffa8\001\002" +
    "\000\030\002\uffa9\007\uffa9\015\uffa9\016\uffa9\017\uffa9\020" +
    "\uffa9\031\uffa9\033\uffa9\034\uffa9\035\uffa9\050\uffa9\001\002" +
    "\000\032\002\uffaa\007\uffaa\012\331\015\uffaa\016\uffaa\017" +
    "\uffaa\020\uffaa\031\uffaa\033\uffaa\034\uffaa\035\uffaa\050\uffaa" +
    "\001\002\000\030\002\uffab\007\uffab\015\uffab\016\uffab\017" +
    "\uffab\020\uffab\031\uffab\033\uffab\034\uffab\035\uffab\050\uffab" +
    "\001\002\000\006\005\337\046\336\001\002\000\004\005" +
    "\334\001\002\000\004\012\335\001\002\000\030\002\uffb3" +
    "\007\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\031\uffb3\033" +
    "\uffb3\034\uffb3\035\uffb3\050\uffb3\001\002\000\006\005\342" +
    "\012\341\001\002\000\004\012\340\001\002\000\030\002" +
    "\uffb4\007\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\031\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\050\uffb4\001\002\000\030\002" +
    "\uffb5\007\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\031\uffb5" +
    "\033\uffb5\034\uffb5\035\uffb5\050\uffb5\001\002\000\032\002" +
    "\uffb6\007\uffb6\012\343\015\uffb6\016\uffb6\017\uffb6\020\uffb6" +
    "\031\uffb6\033\uffb6\034\uffb6\035\uffb6\050\uffb6\001\002\000" +
    "\030\002\uffb7\007\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7" +
    "\031\uffb7\033\uffb7\034\uffb7\035\uffb7\050\uffb7\001\002\000" +
    "\016\005\354\025\135\026\141\046\064\047\062\050\066" +
    "\001\002\000\004\005\346\001\002\000\004\006\347\001" +
    "\002\000\030\003\032\007\351\015\041\016\033\017\027" +
    "\020\017\031\040\033\025\034\010\035\043\050\150\001" +
    "\002\000\026\007\352\015\041\016\033\017\027\020\017" +
    "\031\040\033\025\034\010\035\043\050\150\001\002\000" +
    "\030\002\uff77\007\uff77\015\uff77\016\uff77\017\uff77\020\uff77" +
    "\031\uff77\033\uff77\034\uff77\035\uff77\050\uff77\001\002\000" +
    "\030\002\uff72\007\uff72\015\uff72\016\uff72\017\uff72\020\uff72" +
    "\031\uff72\033\uff72\034\uff72\035\uff72\050\uff72\001\002\000" +
    "\006\005\362\006\361\001\002\000\004\006\355\001\002" +
    "\000\030\003\032\007\357\015\041\016\033\017\027\020" +
    "\017\031\040\033\025\034\010\035\043\050\150\001\002" +
    "\000\026\007\360\015\041\016\033\017\027\020\017\031" +
    "\040\033\025\034\010\035\043\050\150\001\002\000\030" +
    "\002\uff78\007\uff78\015\uff78\016\uff78\017\uff78\020\uff78\031" +
    "\uff78\033\uff78\034\uff78\035\uff78\050\uff78\001\002\000\030" +
    "\002\uff73\007\uff73\015\uff73\016\uff73\017\uff73\020\uff73\031" +
    "\uff73\033\uff73\034\uff73\035\uff73\050\uff73\001\002\000\030" +
    "\003\032\007\373\015\041\016\033\017\027\020\017\031" +
    "\040\033\025\034\010\035\043\050\150\001\002\000\032" +
    "\003\032\006\365\007\364\015\041\016\033\017\027\020" +
    "\017\031\040\033\025\034\010\035\043\050\150\001\002" +
    "\000\026\007\371\015\041\016\033\017\027\020\017\031" +
    "\040\033\025\034\010\035\043\050\150\001\002\000\030" +
    "\002\uff7a\007\uff7a\015\uff7a\016\uff7a\017\uff7a\020\uff7a\031" +
    "\uff7a\033\uff7a\034\uff7a\035\uff7a\050\uff7a\001\002\000\030" +
    "\003\032\007\367\015\041\016\033\017\027\020\017\031" +
    "\040\033\025\034\010\035\043\050\150\001\002\000\026" +
    "\007\370\015\041\016\033\017\027\020\017\031\040\033" +
    "\025\034\010\035\043\050\150\001\002\000\030\002\uff7b" +
    "\007\uff7b\015\uff7b\016\uff7b\017\uff7b\020\uff7b\031\uff7b\033" +
    "\uff7b\034\uff7b\035\uff7b\050\uff7b\001\002\000\030\002\uff76" +
    "\007\uff76\015\uff76\016\uff76\017\uff76\020\uff76\031\uff76\033" +
    "\uff76\034\uff76\035\uff76\050\uff76\001\002\000\030\002\uff75" +
    "\007\uff75\015\uff75\016\uff75\017\uff75\020\uff75\031\uff75\033" +
    "\uff75\034\uff75\035\uff75\050\uff75\001\002\000\026\007\374" +
    "\015\041\016\033\017\027\020\017\031\040\033\025\034" +
    "\010\035\043\050\150\001\002\000\030\002\uff79\007\uff79" +
    "\015\uff79\016\uff79\017\uff79\020\uff79\031\uff79\033\uff79\034" +
    "\uff79\035\uff79\050\uff79\001\002\000\030\002\uff74\007\uff74" +
    "\015\uff74\016\uff74\017\uff74\020\uff74\031\uff74\033\uff74\034" +
    "\uff74\035\uff74\050\uff74\001\002\000\004\002\uffe1\001\002" +
    "\000\006\005\u0103\050\u0102\001\002\000\004\005\u0100\001" +
    "\002\000\004\012\u0101\001\002\000\030\002\uffa2\007\uffa2" +
    "\015\uffa2\016\uffa2\017\uffa2\020\uffa2\031\uffa2\033\uffa2\034" +
    "\uffa2\035\uffa2\050\uffa2\001\002\000\006\005\u0106\012\u0105" +
    "\001\002\000\004\012\u0104\001\002\000\030\002\uffa3\007" +
    "\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\031\uffa3\033\uffa3" +
    "\034\uffa3\035\uffa3\050\uffa3\001\002\000\030\002\uffa4\007" +
    "\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\031\uffa4\033\uffa4" +
    "\034\uffa4\035\uffa4\050\uffa4\001\002\000\032\002\uffa5\007" +
    "\uffa5\012\u0107\015\uffa5\016\uffa5\017\uffa5\020\uffa5\031\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\050\uffa5\001\002\000\030\002" +
    "\uffa6\007\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\031\uffa6" +
    "\033\uffa6\034\uffa6\035\uffa6\050\uffa6\001\002\000\004\002" +
    "\uffd7\001\002\000\004\002\ufff1\001\002\000\004\002\ufff2" +
    "\001\002\000\004\002\uffe8\001\002\000\004\002\uffed\001" +
    "\002\000\004\002\uffe5\001\002\000\004\002\uffe7\001\002" +
    "\000\004\002\uffee\001\002\000\004\002\uffdc\001\002\000" +
    "\004\002\uffef\001\002\000\030\002\uffd8\007\u011b\015\041" +
    "\016\033\017\027\020\017\031\040\033\025\034\010\035" +
    "\043\050\150\001\002\000\010\002\uffe4\004\155\010\156" +
    "\001\002\000\004\002\uffeb\001\002\000\004\002\uffde\001" +
    "\002\000\004\002\ufff0\001\002\000\004\002\uffec\001\002" +
    "\000\004\002\uffe9\001\002\000\004\002\uffea\001\002\000" +
    "\004\002\uffe6\001\002\000\004\002\uffd9\001\002\000\004" +
    "\005\u0179\001\002\000\012\005\u0168\030\u011e\043\u0120\050" +
    "\u011f\001\002\000\004\047\u0162\001\002\000\006\030\u014f" +
    "\047\u014e\001\002\000\006\030\u0121\050\u0122\001\002\000" +
    "\004\047\u0149\001\002\000\006\030\u0124\047\u0123\001\002" +
    "\000\004\012\u0145\001\002\000\006\012\u0126\047\u0125\001" +
    "\002\000\016\012\u013d\025\135\026\141\046\064\047\062" +
    "\050\066\001\002\000\014\025\135\026\141\046\064\047" +
    "\062\050\066\001\002\000\004\012\u0128\001\002\000\012" +
    "\027\u012c\037\u0129\040\u012a\050\u012d\001\002\000\006\037" +
    "\u0139\050\u013a\001\002\000\006\040\u0136\050\u0137\001\002" +
    "\000\006\005\uff63\006\uff63\001\002\000\004\047\u0135\001" +
    "\002\000\012\027\u0131\037\u012e\040\u012f\047\u0130\001\002" +
    "\000\010\005\uff54\006\uff54\037\u0134\001\002\000\010\005" +
    "\uff4f\006\uff4f\040\u0133\001\002\000\006\005\uff57\006\uff57" +
    "\001\002\000\010\005\uff58\006\uff58\047\u0132\001\002\000" +
    "\006\005\uff59\006\uff59\001\002\000\006\005\uff50\006\uff50" +
    "\001\002\000\006\005\uff55\006\uff55\001\002\000\006\005" +
    "\uff56\006\uff56\001\002\000\010\005\uff4e\006\uff4e\050\u0138" +
    "\001\002\000\006\005\uff4c\006\uff4c\001\002\000\006\005" +
    "\uff4d\006\uff4d\001\002\000\010\005\uff53\006\uff53\050\u013b" +
    "\001\002\000\006\005\uff51\006\uff51\001\002\000\006\005" +
    "\uff52\006\uff52\001\002\000\004\012\u0143\001\002\000\016" +
    "\012\u013f\025\135\026\141\046\064\047\062\050\066\001" +
    "\002\000\004\012\u0141\001\002\000\012\027\u012c\037\u0129" +
    "\040\u012a\050\u012d\001\002\000\006\005\uff65\006\uff65\001" +
    "\002\000\016\005\uff66\006\uff66\027\u012c\037\u0129\040\u012a" +
    "\050\u012d\001\002\000\006\005\uff67\006\uff67\001\002\000" +
    "\012\027\u012c\037\u0129\040\u012a\050\u012d\001\002\000\006" +
    "\005\uff64\006\uff64\001\002\000\014\025\135\026\141\046" +
    "\064\047\062\050\066\001\002\000\004\012\u0147\001\002" +
    "\000\012\027\u012c\037\u0129\040\u012a\050\u012d\001\002\000" +
    "\006\005\uff62\006\uff62\001\002\000\004\012\u014a\001\002" +
    "\000\014\025\135\026\141\046\064\047\062\050\066\001" +
    "\002\000\004\012\u014c\001\002\000\012\027\u012c\037\u0129" +
    "\040\u012a\050\u012d\001\002\000\006\005\uff61\006\uff61\001" +
    "\002\000\004\012\u015e\001\002\000\006\012\u0151\047\u0150" +
    "\001\002\000\016\012\u0156\025\135\026\141\046\064\047" +
    "\062\050\066\001\002\000\014\025\135\026\141\046\064" +
    "\047\062\050\066\001\002\000\004\012\u0153\001\002\000" +
    "\012\027\u012c\037\u0129\040\u012a\050\u012d\001\002\000\006" +
    "\005\uff5c\006\uff5c\001\002\000\004\012\u015c\001\002\000" +
    "\016\012\u0158\025\135\026\141\046\064\047\062\050\066" +
    "\001\002\000\004\012\u015a\001\002\000\012\027\u012c\037" +
    "\u0129\040\u012a\050\u012d\001\002\000\006\005\uff5e\006\uff5e" +
    "\001\002\000\016\005\uff5f\006\uff5f\027\u012c\037\u0129\040" +
    "\u012a\050\u012d\001\002\000\006\005\uff60\006\uff60\001\002" +
    "\000\012\027\u012c\037\u0129\040\u012a\050\u012d\001\002\000" +
    "\006\005\uff5d\006\uff5d\001\002\000\014\025\135\026\141" +
    "\046\064\047\062\050\066\001\002\000\004\012\u0160\001" +
    "\002\000\012\027\u012c\037\u0129\040\u012a\050\u012d\001\002" +
    "\000\006\005\uff5b\006\uff5b\001\002\000\004\012\u0163\001" +
    "\002\000\014\025\135\026\141\046\064\047\062\050\066" +
    "\001\002\000\004\012\u0165\001\002\000\012\027\u012c\037" +
    "\u0129\040\u012a\050\u012d\001\002\000\006\005\uff5a\006\uff5a" +
    "\001\002\000\006\005\u016e\006\u016d\001\002\000\004\006" +
    "\u0169\001\002\000\030\003\032\007\u016b\015\041\016\033" +
    "\017\027\020\017\031\040\033\025\034\010\035\043\050" +
    "\150\001\002\000\026\007\u016c\015\041\016\033\017\027" +
    "\020\017\031\040\033\025\034\010\035\043\050\150\001" +
    "\002\000\030\002\uff6f\007\uff6f\015\uff6f\016\uff6f\017\uff6f" +
    "\020\uff6f\031\uff6f\033\uff6f\034\uff6f\035\uff6f\050\uff6f\001" +
    "\002\000\030\002\uff69\007\uff69\015\uff69\016\uff69\017\uff69" +
    "\020\uff69\031\uff69\033\uff69\034\uff69\035\uff69\050\uff69\001" +
    "\002\000\030\003\032\007\u0177\015\041\016\033\017\027" +
    "\020\017\031\040\033\025\034\010\035\043\050\150\001" +
    "\002\000\032\003\032\006\u0171\007\u0170\015\041\016\033" +
    "\017\027\020\017\031\040\033\025\034\010\035\043\050" +
    "\150\001\002\000\026\007\u0175\015\041\016\033\017\027" +
    "\020\017\031\040\033\025\034\010\035\043\050\150\001" +
    "\002\000\030\002\uff71\007\uff71\015\uff71\016\uff71\017\uff71" +
    "\020\uff71\031\uff71\033\uff71\034\uff71\035\uff71\050\uff71\001" +
    "\002\000\030\003\032\007\u0173\015\041\016\033\017\027" +
    "\020\017\031\040\033\025\034\010\035\043\050\150\001" +
    "\002\000\026\007\u0174\015\041\016\033\017\027\020\017" +
    "\031\040\033\025\034\010\035\043\050\150\001\002\000" +
    "\030\002\uff6c\007\uff6c\015\uff6c\016\uff6c\017\uff6c\020\uff6c" +
    "\031\uff6c\033\uff6c\034\uff6c\035\uff6c\050\uff6c\001\002\000" +
    "\030\002\uff6d\007\uff6d\015\uff6d\016\uff6d\017\uff6d\020\uff6d" +
    "\031\uff6d\033\uff6d\034\uff6d\035\uff6d\050\uff6d\001\002\000" +
    "\030\002\uff6b\007\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b" +
    "\031\uff6b\033\uff6b\034\uff6b\035\uff6b\050\uff6b\001\002\000" +
    "\026\007\u0178\015\041\016\033\017\027\020\017\031\040" +
    "\033\025\034\010\035\043\050\150\001\002\000\030\002" +
    "\uff70\007\uff70\015\uff70\016\uff70\017\uff70\020\uff70\031\uff70" +
    "\033\uff70\034\uff70\035\uff70\050\uff70\001\002\000\030\002" +
    "\uff6a\007\uff6a\015\uff6a\016\uff6a\017\uff6a\020\uff6a\031\uff6a" +
    "\033\uff6a\034\uff6a\035\uff6a\050\uff6a\001\002\000\004\006" +
    "\u017a\001\002\000\030\003\032\007\u017c\015\041\016\033" +
    "\017\027\020\017\031\040\033\025\034\010\035\043\050" +
    "\150\001\002\000\026\007\u017d\015\041\016\033\017\027" +
    "\020\017\031\040\033\025\034\010\035\043\050\150\001" +
    "\002\000\030\002\uff6e\007\uff6e\015\uff6e\016\uff6e\017\uff6e" +
    "\020\uff6e\031\uff6e\033\uff6e\034\uff6e\035\uff6e\050\uff6e\001" +
    "\002\000\030\002\uff68\007\uff68\015\uff68\016\uff68\017\uff68" +
    "\020\uff68\031\uff68\033\uff68\034\uff68\035\uff68\050\uff68\001" +
    "\002\000\004\002\uffdb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017c\000\026\002\044\003\033\005\011\006\013\011" +
    "\021\012\025\013\041\016\014\017\015\020\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u011b\001\001\000\022\003\033" +
    "\005\011\006\013\011\021\012\025\013\041\016\u0111\021" +
    "\u010f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\200\005\203\006\202\011\177\012" +
    "\204\013\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\033\005\011\006\013\011\021" +
    "\012\025\013\041\016\014\017\374\020\004\001\001\000" +
    "\006\010\137\014\344\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\033\005\011\006\013\011" +
    "\021\012\025\013\041\016\014\017\315\020\004\001\001" +
    "\000\006\010\137\014\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\114\001\001\000" +
    "\004\010\106\001\001\000\002\001\001\000\004\010\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\313\001\001\000" +
    "\006\010\137\014\212\001\001\000\002\001\001\000\004" +
    "\010\142\001\001\000\002\001\001\000\004\010\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\033\005\011\006\013\011\021\012\025\013" +
    "\041\016\146\001\001\000\016\003\200\005\203\006\202" +
    "\011\177\012\204\013\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\137\014\164\001\001\000\004\007" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\033\005\011\006\013\011\021\012\025\013\041\016\207" +
    "\001\001\000\016\003\200\005\203\006\202\011\177\012" +
    "\204\013\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\033\005" +
    "\011\006\013\011\021\012\025\013\041\016\215\001\001" +
    "\000\016\003\200\005\203\006\202\011\177\012\204\013" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\033\005\011\006\013\011\021\012\025" +
    "\013\041\016\225\001\001\000\016\003\200\005\203\006" +
    "\202\011\177\012\204\013\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\033\005\011\006\013\011" +
    "\021\012\025\013\041\016\300\001\001\000\020\003\033" +
    "\005\011\006\013\011\021\012\025\013\041\016\232\001" +
    "\001\000\016\003\200\005\203\006\202\011\177\012\204" +
    "\013\176\001\001\000\002\001\001\000\020\003\033\005" +
    "\011\006\013\011\021\012\025\013\041\016\235\001\001" +
    "\000\016\003\200\005\203\006\202\011\177\012\204\013" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\033" +
    "\005\011\006\013\011\021\012\025\013\041\016\247\001" +
    "\001\000\016\003\200\005\203\006\202\011\177\012\204" +
    "\013\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\033\005\011\006\013\011\021\012" +
    "\025\013\041\016\267\001\001\000\020\003\033\005\011" +
    "\006\013\011\021\012\025\013\041\016\260\001\001\000" +
    "\016\003\200\005\203\006\202\011\177\012\204\013\176" +
    "\001\001\000\002\001\001\000\020\003\033\005\011\006" +
    "\013\011\021\012\025\013\041\016\263\001\001\000\016" +
    "\003\200\005\203\006\202\011\177\012\204\013\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\200\005\203\006\202\011\177\012\204\013" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\033\005\011\006" +
    "\013\011\021\012\025\013\041\016\275\001\001\000\016" +
    "\003\200\005\203\006\202\011\177\012\204\013\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\200" +
    "\005\203\006\202\011\177\012\204\013\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\033\005\011\006\013\011\021\012\025\013\041\016\310" +
    "\001\001\000\016\003\200\005\203\006\202\011\177\012" +
    "\204\013\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\137\014\164\001\001\000" +
    "\002\001\001\000\004\007\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\137\014\352\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\033\005\011\006\013\011\021\012\025" +
    "\013\041\016\347\001\001\000\016\003\200\005\203\006" +
    "\202\011\177\012\204\013\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\033\005\011\006\013\011\021\012\025\013\041" +
    "\016\355\001\001\000\016\003\200\005\203\006\202\011" +
    "\177\012\204\013\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\033\005\011\006\013\011\021\012" +
    "\025\013\041\016\371\001\001\000\020\003\033\005\011" +
    "\006\013\011\021\012\025\013\041\016\362\001\001\000" +
    "\016\003\200\005\203\006\202\011\177\012\204\013\176" +
    "\001\001\000\002\001\001\000\020\003\033\005\011\006" +
    "\013\011\021\012\025\013\041\016\365\001\001\000\016" +
    "\003\200\005\203\006\202\011\177\012\204\013\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\200\005\203\006\202\011\177\012\204\013" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\200\005\203\006\202\011" +
    "\177\012\204\013\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\u0166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\137\014\u013b\001\001\000\006" +
    "\010\137\014\u0126\001\001\000\002\001\001\000\004\004" +
    "\u012a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\137\014\u013d\001\001" +
    "\000\002\001\001\000\004\004\u013f\001\001\000\002\001" +
    "\001\000\004\004\u0141\001\001\000\002\001\001\000\004" +
    "\004\u0143\001\001\000\002\001\001\000\006\010\137\014" +
    "\u0145\001\001\000\002\001\001\000\004\004\u0147\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\137\014" +
    "\u014a\001\001\000\002\001\001\000\004\004\u014c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\137\014\u0154\001\001\000\006\010\137\014\u0151" +
    "\001\001\000\002\001\001\000\004\004\u0153\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\137\014\u0156" +
    "\001\001\000\002\001\001\000\004\004\u0158\001\001\000" +
    "\002\001\001\000\004\004\u015a\001\001\000\002\001\001" +
    "\000\004\004\u015c\001\001\000\002\001\001\000\006\010" +
    "\137\014\u015e\001\001\000\002\001\001\000\004\004\u0160" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\137\014\u0163\001\001\000\002\001\001\000\004\004\u0165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\033\005\011\006\013\011\021\012\025" +
    "\013\041\016\u0169\001\001\000\016\003\200\005\203\006" +
    "\202\011\177\012\204\013\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\033\005\011\006\013\011" +
    "\021\012\025\013\041\016\u0175\001\001\000\020\003\033" +
    "\005\011\006\013\011\021\012\025\013\041\016\u016e\001" +
    "\001\000\016\003\200\005\203\006\202\011\177\012\204" +
    "\013\176\001\001\000\002\001\001\000\020\003\033\005" +
    "\011\006\013\011\021\012\025\013\041\016\u0171\001\001" +
    "\000\016\003\200\005\203\006\202\011\177\012\204\013" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\200\005\203\006\202\011\177\012" +
    "\204\013\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\033\005\011\006\013\011" +
    "\021\012\025\013\041\016\u017a\001\001\000\016\003\200" +
    "\005\203\006\202\011\177\012\204\013\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

  public void unrecovered_syntax_error(Symbol cur_token)
    {
        errores.add(new ErrorLexSint("Error sintáctico 404", s.right+1, "Sintaxis incorrecta, verificar la documentación del lenguaje BraillePrint"));
    }
    public ArrayList<ErrorLexSint> errores = Compilador.listaErrores;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // VLLA ::= Parentesis_a 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VLLA ::= Parentesis_c 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VLLA ::= Llave_c 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VLLA ::= Corchete_a 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VLLA ::= Corchete_c 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VLLA ::= Punto_Coma 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VLLA ::= Coma 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VLLA ::= Comillas 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VLLA ::= Asignacion 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VLLA ::= Adicion 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VLLA ::= Sustraccion 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VLLA ::= Producto 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VLLA ::= Cociente 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VLLA ::= Num_Entero 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VLLC ::= Parentesis_a 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLC",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VLLC ::= Parentesis_c 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLC",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VLLC ::= Llave_a 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLC",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VLLC ::= Corchete_a 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLC",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VLLC ::= Corchete_c 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLC",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VLLC ::= Punto_Coma 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLC",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VLLC ::= Coma 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLC",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VLLC ::= Comillas 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLC",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VLLC ::= Asignacion 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLC",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VLLC ::= Adicion 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLC",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VLLC ::= Sustraccion 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLC",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VLLC ::= Producto 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLC",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VLLC ::= Cociente 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLC",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VLLC ::= Num_Entero 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLC",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VLLC ::= Identificador 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VLLC",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INICIO ::= Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(2,s.toString(),"Error sintáctico", sright+1, sleft+1, "Sección de inicialización incorrecta, palabra reservada camptrab no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INICIO ::= Identificador CUERPO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(2,s.toString(),"Error sintáctico", sright+1, sleft+1, "Sección de inicialización incorrecta, palabra reservada camptrab no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INICIO ::= Campotrabajo CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INICIO ::= Campotrabajo 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(1,s.toString(),"Error sintáctico", sright+1, sleft+1, "Creación de cuerpo de instrucción no definida"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INICIO ::= CUERPO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(2,s.toString(),"Error sintáctico", sright+1, sleft+1, "Sección de inicialización incorrecta, palabra reservada camptrab no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUERPO ::= Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPO ::= Llave_a 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(3,s.toString(),"Error sintáctico", sright+1, sleft+1, "Llave de cierre no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUERPO ::= Llave_a VLLC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(3,s.toString(),"Error sintáctico", sright+1, sleft+1, "Llave de cierre no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CUERPO ::= VLLA Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(4,s.toString(),"Error sintáctico", sright+1, sleft+1, "Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CUERPO ::= Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(4,s.toString(),"Error sintáctico", sright+1, sleft+1, "Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CUERPO ::= Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CUERPO ::= Llave_a SENTENCIAS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(3,s.toString(),"Error sintáctico", sright+1, sleft+1, "Llave de cierre no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CUERPO ::= SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(4,s.toString(),"Error sintáctico", sright+1, sleft+1, "Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VALOR ::= Num_Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VALOR ::= Texto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VALOR ::= Op_Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VALOR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIAS ::= SENTENCIAS DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIAS ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIAS ::= SENTENCIAS SI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIAS ::= SI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIAS ::= SENTENCIAS ALTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIAS ::= ALTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIAS ::= SENTENCIAS FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIAS ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIAS ::= SENTENCIAS CICLOMIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIAS ::= CICLOMIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIAS ::= SENTENCIAS CICLOFOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIAS ::= CICLOFOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIAS ::= error 
            {
              Object RESULT =null;
		errores.add(new ErrorLexSint("Error sintáctico 404", s.right+1, "Sintaxis incorrecta, verificar la documentación del lenguaje BraillePrint"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Declarar Corchete_a TDATO Corchete_c Identificador Asignacion VALOR Punto_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= Identificador Corchete_a TDATO Corchete_c Identificador Asignacion VALOR Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		errores.add(new ErrorLexSint(51,s.toString(),"Error sintáctico", sright+1, sleft+1, "Declaración inválida, palabra reservada 'declarar' no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= Declarar Corchete_a Identificador Corchete_c Identificador Asignacion VALOR Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		errores.add(new ErrorLexSint(11,s.toString(),"Error sintáctico", sright+1, sleft+1, "Declaración incorrecta, tipo de dato no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= Declarar Corchete_a TDATO Corchete_c Identificador Asignacion VALOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(5,s.toString(),"Error sintáctico", sright+1, sleft+1, "Finalizacion de sentencia incorrecta, ';' no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= Declarar Corchete_a TDATO Corchete_c Identificador Asignacion Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(6,s.toString(),"Error sintáctico", sright+1, sleft+1, "Asignación incorrecta, valor no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= Declarar Corchete_a TDATO Corchete_c Identificador VALOR Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(7,s.toString(),"Error sintáctico", sright+1, sleft+1, "Asignación incorrecta, operador de asignación no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= Declarar Corchete_a TDATO Corchete_c Asignacion VALOR Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(8,s.toString(),"Error sintáctico", sright+1, sleft+1, "Asignación incorrecta, identificador no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= Declarar Corchete_a TDATO Identificador Asignacion VALOR Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		errores.add(new ErrorLexSint(9,s.toString(),"Error sintáctico", sright+1, sleft+1, "Declaración incorrecta, corchete de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= Declarar Corchete_a Corchete_c Identificador Asignacion VALOR Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		errores.add(new ErrorLexSint(11,s.toString(),"Error sintáctico", sright+1, sleft+1, "Declaración incorrecta, tipo de dato no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= Declarar TDATO Corchete_c Identificador Asignacion VALOR Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		errores.add(new ErrorLexSint(10,s.toString(),"Error sintáctico", sright+1, sleft+1, "Declaración incorrecta, corchete de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TDATO ::= Entero 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TDATO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TDATO ::= Flotante 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TDATO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TDATO ::= VarCar 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TDATO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TDATO ::= Num_Entero 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TDATO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNCION ::= func_ValCad Parentesis_a Texto Parentesis_c Punto_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FUNCION ::= func_ValCad Parentesis_a Texto Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(5,s.toString(),"Error sintáctico", sright+1, sleft+1, "Finalizacion de sentencia incorrecta, ';' no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FUNCION ::= func_ValCad Parentesis_a Texto Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(16,s.toString(),"Error sintáctico", sright+1, sleft+1, "Paréntesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUNCION ::= func_ValCad Parentesis_a Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(14,s.toString(),"Error sintáctico", sright+1, sleft+1, "Parámetro inválido o no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FUNCION ::= func_ValCad Texto Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(17,s.toString(),"Error sintáctico", sright+1, sleft+1, "Paréntesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FUNCION ::= Identificador Parentesis_a Texto Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(15,s.toString(),"Error sintáctico", sright+1, sleft+1, "Formato inválido de posible función, nombre incorrecto o no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FUNCION ::= Identificador Parentesis_a Identificador Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(15,s.toString(),"Error sintáctico", sright+1, sleft+1, "Formato inválido de posible función, nombre incorrecto o no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FUNCION ::= func_Ver Parentesis_a Identificador Parentesis_c Punto_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FUNCION ::= func_Ver Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(5,s.toString(),"Error sintáctico", sright+1, sleft+1, "Finalizacion de sentencia incorrecta, ';' no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FUNCION ::= func_Ver Parentesis_a Identificador Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(16,s.toString(),"Error sintáctico", sright+1, sleft+1, "Paréntesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FUNCION ::= func_Ver Parentesis_a Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(14,s.toString(),"Error sintáctico", sright+1, sleft+1, "Parámetro inválido o no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FUNCION ::= func_Ver Identificador Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(17,s.toString(),"Error sintáctico", sright+1, sleft+1, "Paréntesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FUNCION ::= func_ContCarac Parentesis_a Identificador Parentesis_c Punto_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FUNCION ::= func_ContCarac Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(5,s.toString(),"Error sintáctico", sright+1, sleft+1, "Finalizacion de sentencia incorrecta, ';' no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FUNCION ::= func_ContCarac Parentesis_a Identificador Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(16,s.toString(),"Error sintáctico", sright+1, sleft+1, "Paréntesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FUNCION ::= func_ContCarac Parentesis_a Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(14,s.toString(),"Error sintáctico", sright+1, sleft+1, "Parámetro inválido o no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FUNCION ::= func_ContCarac Identificador Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(17,s.toString(),"Error sintáctico", sright+1, sleft+1, "Paréntesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FUNCION ::= func_Imprimir Parentesis_a Identificador Parentesis_c Punto_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FUNCION ::= func_Imprimir Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(5,s.toString(),"Error sintáctico", sright+1, sleft+1, "Finalizacion de sentencia incorrecta, ';' no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FUNCION ::= func_Imprimir Parentesis_a Identificador Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(16,s.toString(),"Error sintáctico", sright+1, sleft+1, "Paréntesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FUNCION ::= func_Imprimir Parentesis_a Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(14,s.toString(),"Error sintáctico", sright+1, sleft+1, "Parámetro inválido o no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FUNCION ::= func_Imprimir Identificador Parentesis_c Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(17,s.toString(),"Error sintáctico", sright+1, sleft+1, "Paréntesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SI ::= Identificador Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		errores.add(new ErrorLexSint(52,s.toString(),"Error sintáctico", sright+1, sleft+1, "Inicialización de condicional incorrecta, palabra reservada 'si' no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SI ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(4,s.toString(),"Error sintáctico", sright+1, sleft+1, "Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SI ::= Si Parentesis_a SENTENCIA_BOOLEANA Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(16,s.toString(),"Error sintáctico", sright+1, sleft+1, "Paréntesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SI ::= Si Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(18,s.toString(),"Error sintáctico", sright+1, sleft+1, "Sentencia/parámetro inválidos o no encontrados"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SI ::= Si SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		errores.add(new ErrorLexSint(17,s.toString(),"Error sintáctico", sright+1, sleft+1, "Paréntesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SI ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SI ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(4,s.toString(),"Error sintáctico", sright+1, sleft+1, "Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SI ::= Si Parentesis_a SENTENCIA_BOOLEANA Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(16,s.toString(),"Error sintáctico", sright+1, sleft+1, "Paréntesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SI ::= Si Parentesis_a Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		errores.add(new ErrorLexSint(18,s.toString(),"Error sintáctico", sright+1, sleft+1, "Sentencia/parámetro inválidos o no encontrados"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SI ::= Si SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		errores.add(new ErrorLexSint(17,s.toString(),"Error sintáctico", sright+1, sleft+1, "Paréntesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIA_BOOLEANA ::= Op_Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTENCIA_BOOLEANA ::= VALOR Op_Relacional VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENTENCIA_BOOLEANA ::= VALOR Op_Relacional 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(19,s.toString(),"Error sintáctico", sright+1, sleft+1, "Valor no encontrado, posibles esperados: Op_Booleano, identificador, Num_Entero, Texto"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENTENCIA_BOOLEANA ::= VALOR VALOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(20,s.toString(),"Error sintáctico", sright+1, sleft+1, "Operador relacional inválido o no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SENTENCIA_BOOLEANA ::= Op_Relacional VALOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(19,s.toString(),"Error sintáctico", sright+1, sleft+1, "Valor no encontrado, posibles esperados: Op_Booleano, identificador, Num_Entero, Texto"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c Identificador Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(53,s.toString(),"Error sintáctico", sright+1, sleft+1, "Secuencia de condicional incorrecta, palabra reservada 'alter' no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c Alter Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c Alter Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(36,s.toString(),"Error sintáctico", sright+1, sleft+1, "Alter, Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(37,s.toString(),"Error sintáctico", sright+1, sleft+1, "Ausencia de 'Alter' o exceso de llaves"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Alter Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(35,s.toString(),"Error sintáctico", sright+1, sleft+1, "Alter, Llave de cierre no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Llave_a Llave_c Alter Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		errores.add(new ErrorLexSint(16,s.toString(),"Error sintáctico", sright+1, sleft+1, "Paréntesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ALTER ::= Si Parentesis_a Parentesis_c Llave_a Llave_c Alter Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		errores.add(new ErrorLexSint(18,s.toString(),"Error sintáctico", sright+1, sleft+1, "Sentencia/parámetro inválidos o no encontrados"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ALTER ::= Si SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c Alter Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		errores.add(new ErrorLexSint(17,s.toString(),"Error sintáctico", sright+1, sleft+1, "Paréntesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c Alter Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(36,s.toString(),"Error sintáctico", sright+1, sleft+1, "Alter, Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(37,s.toString(),"Error sintáctico", sright+1, sleft+1, "Ausencia de 'Alter' o exceso de llaves"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c SENTENCIAS Llave_c Alter Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		errores.add(new ErrorLexSint(36,s.toString(),"Error sintáctico", sright+1, sleft+1, "Alter, Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Llave_a SENTENCIAS Llave_c Alter Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		errores.add(new ErrorLexSint(16,s.toString(),"Error sintáctico", sright+1, sleft+1, "Paréntesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ALTER ::= Si Parentesis_a Parentesis_c Llave_a SENTENCIAS Llave_c Alter Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		errores.add(new ErrorLexSint(18,s.toString(),"Error sintáctico", sright+1, sleft+1, "Sentencia/parámetro inválidos o no encontrados"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ALTER ::= Si SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c Alter Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		errores.add(new ErrorLexSint(17,s.toString(),"Error sintáctico", sright+1, sleft+1, "Paréntesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c Alter Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c Alter Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(35,s.toString(),"Error sintáctico", sright+1, sleft+1, "Alter, Sentencias no definidas"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c Alter SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(36,s.toString(),"Error sintáctico", sright+1, sleft+1, "Alter, Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(37,s.toString(),"Error sintáctico", sright+1, sleft+1, "Ausencia de 'Alter' o exceso de llaves"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c Alter Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		errores.add(new ErrorLexSint(35,s.toString(),"Error sintáctico", sright+1, sleft+1, "Alter, Sin sentencias"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c SENTENCIAS Llave_c Alter Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		errores.add(new ErrorLexSint(36,s.toString(),"Error sintáctico", sright+1, sleft+1, "Alter, Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ALTER ::= Si Parentesis_a SENTENCIA_BOOLEANA Llave_a SENTENCIAS Llave_c Alter Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		errores.add(new ErrorLexSint(16,s.toString(),"Error sintáctico", sright+1, sleft+1, "Paréntesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ALTER ::= Si Parentesis_a Parentesis_c Llave_a SENTENCIAS Llave_c Alter Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		errores.add(new ErrorLexSint(18,s.toString(),"Error sintáctico", sright+1, sleft+1, "Sentencia/parámetro inválidos o no encontrados"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ALTER ::= Si SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c Alter Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		errores.add(new ErrorLexSint(17,s.toString(),"Error sintáctico", sright+1, sleft+1, "Paréntesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CICLOMIENTRAS ::= CicloMientras Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CICLOMIENTRAS ::= CicloMientras Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(40,s.toString(),"Error sintáctico", sright+1, sleft+1, "cicloMientras, Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CICLOMIENTRAS ::= CicloMientras Parentesis_a SENTENCIA_BOOLEANA Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(41,s.toString(),"Error sintáctico", sright+1, sleft+1, "cicloMientras, Parentesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CICLOMIENTRAS ::= CicloMientras Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(42,s.toString(),"Error sintáctico", sright+1, sleft+1, "cicloMientras, Sentencia booleana no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CICLOMIENTRAS ::= CicloMientras SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		errores.add(new ErrorLexSint(43,s.toString(),"Error sintáctico", sright+1, sleft+1, "cicloMientras, Parentesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CICLOMIENTRAS ::= CicloMientras Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CICLOMIENTRAS ::= CicloMientras Parentesis_a SENTENCIA_BOOLEANA Parentesis_c SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(40,s.toString(),"Error sintáctico", sright+1, sleft+1, "cicloMientras, Llave de apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CICLOMIENTRAS ::= CicloMientras Parentesis_a SENTENCIA_BOOLEANA Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(41,s.toString(),"Error sintáctico", sright+1, sleft+1, "cicloMientras, Parentesis de cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CICLOMIENTRAS ::= CicloMientras Parentesis_a Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		errores.add(new ErrorLexSint(42,s.toString(),"Error sintáctico", sright+1, sleft+1, "cicloMientras, Sentencia booleana no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CICLOMIENTRAS ::= CicloMientras SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		errores.add(new ErrorLexSint(43,s.toString(),"Error sintáctico", sright+1, sleft+1, "cicloMientras, Parentesis de apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CICLOFOR ::= CicloFor Parentesis_a SENTENCIA_FOR Parentesis_c Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(30,s.toString(),"Error sintáctico", sright+1, sleft+1, "Ciclofor, Llave apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CICLOFOR ::= CicloFor Parentesis_a SENTENCIA_FOR Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(31,s.toString(),"Error sintáctico", sright+1, sleft+1, "Ciclofor, Paréntesis cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CICLOFOR ::= CicloFor Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(33,s.toString(),"Error sintáctico", sright+1, sleft+1, "Ciclofor, SENTENCIA_FOR no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CICLOFOR ::= CicloFor SENTENCIA_FOR Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		errores.add(new ErrorLexSint(32,s.toString(),"Error sintáctico", sright+1, sleft+1, "Ciclofor, Paréntesis apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CICLOFOR ::= CicloFor Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CICLOFOR ::= CicloFor Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(34,s.toString(),"Error sintáctico", sright+1, sleft+1, "Ciclofor, SENTENCIAS no encontradas"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CICLOFOR ::= CicloFor Parentesis_a SENTENCIA_FOR Parentesis_c SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(30,s.toString(),"Error sintáctico", sright+1, sleft+1, "Ciclofor, Llave apertura no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CICLOFOR ::= CicloFor Parentesis_a SENTENCIA_FOR Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(31,s.toString(),"Error sintáctico", sright+1, sleft+1, "Ciclofor, Paréntesis cierre no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CICLOFOR ::= CicloFor Parentesis_a Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		errores.add(new ErrorLexSint(33,s.toString(),"Error sintáctico", sright+1, sleft+1, "Ciclofor, SENTENCIA_FOR no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CICLOFOR ::= CicloFor SENTENCIA_FOR Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		errores.add(new ErrorLexSint(32,s.toString(),"Error sintáctico", sright+1, sleft+1, "Ciclofor, Paréntesis apertura no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SENTENCIA_FOR ::= Entero Identificador Asignacion Num_Entero Punto_Coma SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SENTENCIA_FOR ::= Entero Identificador Asignacion Num_Entero Punto_Coma SENTENCIA_BOOLEANA Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		errores.add(new ErrorLexSint(24,s.toString(),"Error sintáctico", sright+1, sleft+1, "Sentencia ciclofor, declaración_for no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SENTENCIA_FOR ::= Entero Identificador Asignacion Num_Entero Punto_Coma Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(26,s.toString(),"Error sintáctico", sright+1, sleft+1, "Sentencia ciclofor, sentencia_booleana no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SENTENCIA_FOR ::= Entero Identificador Asignacion Num_Entero SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(25,s.toString(),"Error sintáctico", sright+1, sleft+1, "Sentencia ciclofor, ';' no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SENTENCIA_FOR ::= Entero Identificador Asignacion Punto_Coma SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		errores.add(new ErrorLexSint(26,s.toString(),"Error sintáctico", sright+1, sleft+1, "Sentencia ciclofor, numero entero no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // SENTENCIA_FOR ::= Entero Identificador Num_Entero Punto_Coma SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		errores.add(new ErrorLexSint(27,s.toString(),"Error sintáctico", sright+1, sleft+1, "Sentencia ciclofor, Operador asignación no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SENTENCIA_FOR ::= Entero Asignacion Num_Entero Punto_Coma SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		errores.add(new ErrorLexSint(28,s.toString(),"Error sintáctico", sright+1, sleft+1, "Sentencia ciclofor, Identificador no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SENTENCIA_FOR ::= Identificador Asignacion Num_Entero Punto_Coma SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SENTENCIA_FOR ::= Identificador Asignacion Num_Entero Punto_Coma SENTENCIA_BOOLEANA Punto_Coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(24,s.toString(),"Error sintáctico", sright+1, sleft+1, "Sentencia ciclofor, declaración_for no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // SENTENCIA_FOR ::= Identificador Asignacion Num_Entero Punto_Coma Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		errores.add(new ErrorLexSint(26,s.toString(),"Error sintáctico", sright+1, sleft+1, "Sentencia ciclofor, sentencia_booleana no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // SENTENCIA_FOR ::= Identificador Asignacion Num_Entero SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		errores.add(new ErrorLexSint(25,s.toString(),"Error sintáctico", sright+1, sleft+1, "Sentencia ciclofor, ';' no encontrada"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // SENTENCIA_FOR ::= Identificador Asignacion Punto_Coma SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		errores.add(new ErrorLexSint(26,s.toString(),"Error sintáctico", sright+1, sleft+1, "Sentencia ciclofor, numero entero no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // SENTENCIA_FOR ::= Identificador Num_Entero Punto_Coma SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		errores.add(new ErrorLexSint(27,s.toString(),"Error sintáctico", sright+1, sleft+1, "Sentencia ciclofor, Operador asignación no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // SENTENCIA_FOR ::= Asignacion Num_Entero Punto_Coma SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		errores.add(new ErrorLexSint(28,s.toString(),"Error sintáctico", sright+1, sleft+1, "Sentencia ciclofor, Identificador no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // DECLARACION_FOR ::= Identificador Op_Atribucion Num_Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // DECLARACION_FOR ::= Identificador Op_Atribucion 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(19,s.toString(),"Error sintáctico", sright+1, sleft+1, "Declaración ciclofor, número no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // DECLARACION_FOR ::= Identificador Num_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(20,s.toString(),"Error sintáctico", sright+1, sleft+1, "Declaración ciclofor, Op_atribución no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // DECLARACION_FOR ::= Op_Atribucion Num_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(21,s.toString(),"Error sintáctico", sright+1, sleft+1, "Declaración ciclofor, identificador no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // DECLARACION_FOR ::= Identificador Adicion Adicion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // DECLARACION_FOR ::= Identificador Adicion 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(22,s.toString(),"Error sintáctico", sright+1, sleft+1, "Declaración ciclofor, operador adición no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // DECLARACION_FOR ::= Adicion Adicion 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(21,s.toString(),"Error sintáctico", sright+1, sleft+1, "Declaración ciclofor, identificador no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // DECLARACION_FOR ::= Adicion Adicion Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // DECLARACION_FOR ::= Adicion Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(22,s.toString(),"Error sintáctico", sright+1, sleft+1, "Declaración ciclofor, operador adición no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // DECLARACION_FOR ::= Identificador Sustraccion Sustraccion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // DECLARACION_FOR ::= Identificador Sustraccion 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(23,s.toString(),"Error sintáctico", sright+1, sleft+1, "Declaración ciclofor, operador sustracción no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // DECLARACION_FOR ::= Sustraccion Sustraccion 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(21,s.toString(),"Error sintáctico", sright+1, sleft+1, "Declaración ciclofor, identificador no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // DECLARACION_FOR ::= Sustraccion Sustraccion Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // DECLARACION_FOR ::= Sustraccion Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		errores.add(new ErrorLexSint(23,s.toString(),"Error sintáctico", sright+1, sleft+1, "Declaración ciclofor, operador sustracción no encontrado"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
